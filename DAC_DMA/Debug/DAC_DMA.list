
DAC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb0  08005bb0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000098  08005c50  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005c50  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff5c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f7  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00032220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00033038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a6b  00000000  00000000  00033d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010525  00000000  00000000  000557e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d03d4  00000000  00000000  00065d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001360dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004058  00000000  00000000  0013612c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b24 	.word	0x08005b24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08005b24 	.word	0x08005b24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <HAL_UART_TxCpltCallback>:
char buffer[100] ;

float voltages[10] = {0.25 , 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.3 } ;
uint16_t dac_values[10] ;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

	if( huart == &huart2 ){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_UART_TxCpltCallback+0x20>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d102      	bne.n	8000db6 <HAL_UART_TxCpltCallback+0x16>
		HAL_UART_DMAPause( &huart2 );
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <HAL_UART_TxCpltCallback+0x20>)
 8000db2:	f003 f939 	bl	8004028 <HAL_UART_DMAPause>
	}

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000170 	.word	0x20000170

08000dc4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

	static int i = 0;

	if( htim == &htim2 ){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d10c      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x2a>
		sprintf(buffer, "%04d \n", dac_values[i]);
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dde:	461a      	mov	r2, r3
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000de2:	480f      	ldr	r0, [pc, #60]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000de4:	f004 fa30 	bl	8005248 <siprintf>
		HAL_UART_DMAResume( &huart2 );
 8000de8:	480e      	ldr	r0, [pc, #56]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000dea:	f003 f9c9 	bl	8004180 <HAL_UART_DMAResume>
	}

	i++;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000df6:	6013      	str	r3, [r2, #0]
	if(i >= 7){
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	dd02      	ble.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x42>
		i = 0;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
	}

}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000128 	.word	0x20000128
 8000e14:	2000028c 	.word	0x2000028c
 8000e18:	20000278 	.word	0x20000278
 8000e1c:	08005b3c 	.word	0x08005b3c
 8000e20:	20000214 	.word	0x20000214
 8000e24:	20000170 	.word	0x20000170

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fc3b 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f86b 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 f9a1 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3a:	f000 f977 	bl	800112c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e3e:	f000 f94b 	bl	80010d8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000e42:	f000 f8d1 	bl	8000fe8 <MX_DAC_Init>
  MX_TIM2_Init();
 8000e46:	f000 f8f9 	bl	800103c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  sprintf(buffer, "Hello World! \n");
 8000e4a:	4929      	ldr	r1, [pc, #164]	; (8000ef0 <main+0xc8>)
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <main+0xcc>)
 8000e4e:	f004 f9fb 	bl	8005248 <siprintf>

  HAL_TIM_Base_Start_IT(&htim2);
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <main+0xd0>)
 8000e54:	f002 fbea 	bl	800362c <HAL_TIM_Base_Start_IT>
  HAL_StatusTypeDef result2 = HAL_UART_Transmit_DMA(&huart2, buffer, strlen(buffer));
 8000e58:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <main+0xcc>)
 8000e5a:	f7ff f9d9 	bl	8000210 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	4923      	ldr	r1, [pc, #140]	; (8000ef4 <main+0xcc>)
 8000e66:	4825      	ldr	r0, [pc, #148]	; (8000efc <main+0xd4>)
 8000e68:	f003 f860 	bl	8003f2c <HAL_UART_Transmit_DMA>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	70fb      	strb	r3, [r7, #3]

  //HAL_DAC_Start( &hdac , DAC_CHANNEL_1 );

  int i;
  for(i = 0 ; i < 8 ; i++){
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	e024      	b.n	8000ec0 <main+0x98>
	  dac_values[i] = (uint16_t)( ( voltages[i] / 3.3 ) * 4095 ) ;
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <main+0xd8>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb81 	bl	8000588 <__aeabi_f2d>
 8000e86:	a316      	add	r3, pc, #88	; (adr r3, 8000ee0 <main+0xb8>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fcfe 	bl	800088c <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	a313      	add	r3, pc, #76	; (adr r3, 8000ee8 <main+0xc0>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fbcb 	bl	8000638 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fdd7 	bl	8000a5c <__aeabi_d2uiz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b299      	uxth	r1, r3
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <main+0xdc>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i = 0 ; i < 8 ; i++){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	ddd7      	ble.n	8000e76 <main+0x4e>
  }
  HAL_StatusTypeDef result = HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, dac_values, 8, DAC_ALIGN_12B_R);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2308      	movs	r3, #8
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <main+0xdc>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <main+0xe0>)
 8000ed2:	f000 fd8f 	bl	80019f4 <HAL_DAC_Start_DMA>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	70bb      	strb	r3, [r7, #2]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <main+0xb2>
 8000edc:	f3af 8000 	nop.w
 8000ee0:	66666666 	.word	0x66666666
 8000ee4:	400a6666 	.word	0x400a6666
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	40affe00 	.word	0x40affe00
 8000ef0:	08005b44 	.word	0x08005b44
 8000ef4:	20000214 	.word	0x20000214
 8000ef8:	20000128 	.word	0x20000128
 8000efc:	20000170 	.word	0x20000170
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000278 	.word	0x20000278
 8000f08:	200000b4 	.word	0x200000b4

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2234      	movs	r2, #52	; 0x34
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f98c 	bl	8005238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <SystemClock_Config+0xd8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <SystemClock_Config+0xd8>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <SystemClock_Config+0xd8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f80:	2310      	movs	r3, #16
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f858 	bl	8003050 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fa6:	f000 f957 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fcf8 	bl	80029bc <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fd2:	f000 f941 	bl	8001258 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	; 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_DAC_Init+0x4c>)
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <MX_DAC_Init+0x50>)
 8000ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_DAC_Init+0x4c>)
 8000ffe:	f000 fcd6 	bl	80019ae <HAL_DAC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001008:	f000 f926 	bl	8001258 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800100c:	2324      	movs	r3, #36	; 0x24
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_DAC_Init+0x4c>)
 800101c:	f000 fe3a 	bl	8001c94 <HAL_DAC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001026:	f000 f917 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000b4 	.word	0x200000b4
 8001038:	40007400 	.word	0x40007400

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM2_Init+0x98>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001062:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000-1;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001070:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001074:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM2_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001084:	f002 fa82 	bl	800358c <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800108e:	f000 f8e3 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM2_Init+0x98>)
 80010a0:	f002 fc3c 	bl	800391c <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010aa:	f000 f8d5 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ae:	2320      	movs	r3, #32
 80010b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM2_Init+0x98>)
 80010bc:	f002 fe58 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f000 f8c7 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000128 	.word	0x20000128

080010d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_USART2_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_USART2_UART_Init+0x4c>)
 8001110:	f002 febe 	bl	8003e90 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f000 f89d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000170 	.word	0x20000170
 8001128:	40004400 	.word	0x40004400

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_DMA_Init+0x4c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <MX_DMA_Init+0x4c>)
 800113c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_DMA_Init+0x4c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2010      	movs	r0, #16
 8001154:	f000 fbf5 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001158:	2010      	movs	r0, #16
 800115a:	f000 fc0e 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2011      	movs	r0, #17
 8001164:	f000 fbed 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001168:	2011      	movs	r0, #17
 800116a:	f000 fc06 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a2c      	ldr	r2, [pc, #176]	; (800124c <MX_GPIO_Init+0xd0>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a25      	ldr	r2, [pc, #148]	; (800124c <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2120      	movs	r1, #32
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_GPIO_Init+0xd4>)
 8001208:	f001 fbbe 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_GPIO_Init+0xd8>)
 8001224:	f001 fa1c 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001228:	2320      	movs	r3, #32
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_GPIO_Init+0xd4>)
 8001240:	f001 fa0e 	bl	8002660 <HAL_GPIO_Init>

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020800 	.word	0x40020800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f000 fb42 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <HAL_DAC_MspInit+0xf0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d161      	bne.n	800139a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_DAC_MspInit+0xf4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_DAC_MspInit+0xf4>)
 80012e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_DAC_MspInit+0xf4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_DAC_MspInit+0xf4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <HAL_DAC_MspInit+0xf4>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <HAL_DAC_MspInit+0xf4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4822      	ldr	r0, [pc, #136]	; (80013ac <HAL_DAC_MspInit+0xf8>)
 8001322:	f001 f99d 	bl	8002660 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001328:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <HAL_DAC_MspInit+0x100>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 800132e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001332:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001346:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 800134a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 800135a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001362:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001366:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800136e:	4810      	ldr	r0, [pc, #64]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001370:	f000 fd74 	bl	8001e5c <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800137a:	f7ff ff6d 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_DAC_MspInit+0xfc>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2036      	movs	r0, #54	; 0x36
 8001390:	f000 fad7 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001394:	2036      	movs	r0, #54	; 0x36
 8001396:	f000 faf0 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40007400 	.word	0x40007400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	200000c8 	.word	0x200000c8
 80013b4:	40026088 	.word	0x40026088

080013b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c8:	d115      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x48>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_TIM_Base_MspInit+0x48>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_TIM_Base_MspInit+0x48>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201c      	movs	r0, #28
 80013ec:	f000 faa9 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f0:	201c      	movs	r0, #28
 80013f2:	f000 fac2 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a35      	ldr	r2, [pc, #212]	; (80014f8 <HAL_UART_MspInit+0xf4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d163      	bne.n	80014ee <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_UART_MspInit+0xf8>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <HAL_UART_MspInit+0xf8>)
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_UART_MspInit+0xf8>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_UART_MspInit+0xf8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <HAL_UART_MspInit+0xf8>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_UART_MspInit+0xf8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800145e:	230c      	movs	r3, #12
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146e:	2307      	movs	r3, #7
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4821      	ldr	r0, [pc, #132]	; (8001500 <HAL_UART_MspInit+0xfc>)
 800147a:	f001 f8f1 	bl	8002660 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_UART_MspInit+0x100>)
 8001480:	4a21      	ldr	r2, [pc, #132]	; (8001508 <HAL_UART_MspInit+0x104>)
 8001482:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_UART_MspInit+0x100>)
 8001486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_UART_MspInit+0x100>)
 800148e:	2240      	movs	r2, #64	; 0x40
 8001490:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_UART_MspInit+0x100>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_UART_MspInit+0x100>)
 800149a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014c4:	f000 fcca 	bl	8001e5c <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80014ce:	f7ff fec3 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_UART_MspInit+0x100>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2026      	movs	r0, #38	; 0x26
 80014e4:	f000 fa2d 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e8:	2026      	movs	r0, #38	; 0x26
 80014ea:	f000 fa46 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	200001b4 	.word	0x200001b4
 8001508:	400260a0 	.word	0x400260a0

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8f8 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Stream5_IRQHandler+0x10>)
 8001566:	f000 fe11 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000c8 	.word	0x200000c8

08001574 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Stream6_IRQHandler+0x10>)
 800157a:	f000 fe07 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001b4 	.word	0x200001b4

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM2_IRQHandler+0x10>)
 800158e:	f002 f8bd 	bl	800370c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000128 	.word	0x20000128

0800159c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USART2_IRQHandler+0x10>)
 80015a2:	f002 fe8b 	bl	80042bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000170 	.word	0x20000170

080015b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM6_DAC_IRQHandler+0x10>)
 80015b6:	f000 faeb 	bl	8001b90 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000b4 	.word	0x200000b4

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f003 fdf6 	bl	80051e4 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	20000290 	.word	0x20000290
 800162c:	200002a8 	.word	0x200002a8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd7 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f003 fdb5 	bl	80051f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fbcf 	bl	8000e28 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001698:	08005bb8 	.word	0x08005bb8
  ldr r2, =_sbss
 800169c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80016a0:	200002a8 	.word	0x200002a8

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f92b 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fdc2 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f943 	bl	8001996 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001728:	f000 f90b 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000028 	.word	0x20000028
 8001744:	20000030 	.word	0x20000030
 8001748:	2000002c 	.word	0x2000002c

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000030 	.word	0x20000030
 8001770:	20000294 	.word	0x20000294

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000294 	.word	0x20000294

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e014      	b.n	80019ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fc6f 	bl	80012b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	795b      	ldrb	r3, [r3, #5]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_DAC_Start_DMA+0x22>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0ab      	b.n	8001b6e <HAL_DAC_Start_DMA+0x17a>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d12f      	bne.n	8001a88 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_DAC_Start_DMA+0x184>)
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_DAC_Start_DMA+0x188>)
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_DAC_Start_DMA+0x18c>)
 8001a3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d013      	beq.n	8001a7e <HAL_DAC_Start_DMA+0x8a>
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d845      	bhi.n	8001ae8 <HAL_DAC_Start_DMA+0xf4>
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_DAC_Start_DMA+0x76>
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d005      	beq.n	8001a74 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001a68:	e03e      	b.n	8001ae8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	613b      	str	r3, [r7, #16]
        break;
 8001a72:	e03c      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	613b      	str	r3, [r7, #16]
        break;
 8001a7c:	e037      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3310      	adds	r3, #16
 8001a84:	613b      	str	r3, [r7, #16]
        break;
 8001a86:	e032      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <HAL_DAC_Start_DMA+0x190>)
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <HAL_DAC_Start_DMA+0x194>)
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a3b      	ldr	r2, [pc, #236]	; (8001b8c <HAL_DAC_Start_DMA+0x198>)
 8001a9e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d013      	beq.n	8001ade <HAL_DAC_Start_DMA+0xea>
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d817      	bhi.n	8001aec <HAL_DAC_Start_DMA+0xf8>
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_DAC_Start_DMA+0xd6>
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d005      	beq.n	8001ad4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001ac8:	e010      	b.n	8001aec <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3314      	adds	r3, #20
 8001ad0:	613b      	str	r3, [r7, #16]
        break;
 8001ad2:	e00c      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	613b      	str	r3, [r7, #16]
        break;
 8001adc:	e007      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	331c      	adds	r3, #28
 8001ae4:	613b      	str	r3, [r7, #16]
        break;
 8001ae6:	e002      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <HAL_DAC_Start_DMA+0xfa>
        break;
 8001aec:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6898      	ldr	r0, [r3, #8]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	f000 fa53 	bl	8001fb8 <HAL_DMA_Start_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	75fb      	strb	r3, [r7, #23]
 8001b16:	e010      	b.n	8001b3a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	68d8      	ldr	r0, [r3, #12]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	f000 fa41 	bl	8001fb8 <HAL_DMA_Start_IT>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e005      	b.n	8001b6c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f043 0204 	orr.w	r2, r3, #4
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08001d33 	.word	0x08001d33
 8001b7c:	08001d55 	.word	0x08001d55
 8001b80:	08001d71 	.word	0x08001d71
 8001b84:	08001def 	.word	0x08001def
 8001b88:	08001e11 	.word	0x08001e11
 8001b8c:	08001e2d 	.word	0x08001e2d

08001b90 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba6:	d120      	bne.n	8001bea <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb6:	d118      	bne.n	8001bea <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001be2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f84b 	bl	8001c80 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf8:	d120      	bne.n	8001c3c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c08:	d118      	bne.n	8001c3c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f043 0202 	orr.w	r2, r3, #2
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001c34:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8cf 	bl	8001dda <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_DAC_ConfigChannel+0x18>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e03c      	b.n	8001d26 <HAL_DAC_ConfigChannel+0x92>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	22c0      	movs	r2, #192	; 0xc0
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff ff7f 	bl	8001c44 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	711a      	strb	r2, [r3, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff ff78 	bl	8001c58 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff ff6e 	bl	8001c6c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	711a      	strb	r2, [r3, #4]
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff ffce 	bl	8001d9e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	711a      	strb	r2, [r3, #4]
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff ffc7 	bl	8001db2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f043 0204 	orr.w	r2, r3, #4
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff ffbd 	bl	8001dc6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	711a      	strb	r2, [r3, #4]
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff fc84 	bl	8001774 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e099      	b.n	8001fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e98:	e00f      	b.n	8001eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9a:	f7ff fc6b 	bl	8001774 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d908      	bls.n	8001eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e078      	b.n	8001fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e8      	bne.n	8001e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_DMA_Init+0x158>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f023 0307 	bic.w	r3, r3, #7
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d117      	bne.n	8001f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fb01 	bl	8002568 <DMA_CheckFifoParam>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e016      	b.n	8001fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fab8 	bl	80024fc <DMA_CalcBaseAndBitshift>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	f010803f 	.word	0xf010803f

08001fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_Start_IT+0x26>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e040      	b.n	8002060 <HAL_DMA_Start_IT+0xa8>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12f      	bne.n	8002052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa4a 	bl	80024a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	223f      	movs	r2, #63	; 0x3f
 8002012:	409a      	lsls	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0216 	orr.w	r2, r2, #22
 8002026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0208 	orr.w	r2, r2, #8
 800203e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e005      	b.n	800205e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002076:	f7ff fb7d 	bl	8001774 <HAL_GetTick>
 800207a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d008      	beq.n	800209a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e052      	b.n	8002140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0216 	bic.w	r2, r2, #22
 80020a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <HAL_DMA_Abort+0x62>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0208 	bic.w	r2, r2, #8
 80020d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ea:	e013      	b.n	8002114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ec:	f7ff fb42 	bl	8001774 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d90c      	bls.n	8002114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2203      	movs	r2, #3
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e015      	b.n	8002140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1e4      	bne.n	80020ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	223f      	movs	r2, #63	; 0x3f
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00c      	b.n	8002180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2205      	movs	r2, #5
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002198:	4b8e      	ldr	r3, [pc, #568]	; (80023d4 <HAL_DMA_IRQHandler+0x248>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a8e      	ldr	r2, [pc, #568]	; (80023d8 <HAL_DMA_IRQHandler+0x24c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a9b      	lsrs	r3, r3, #10
 80021a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	2208      	movs	r2, #8
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01a      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2208      	movs	r2, #8
 80021e6:	409a      	lsls	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d012      	beq.n	800222e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	2201      	movs	r2, #1
 800221c:	409a      	lsls	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0202 	orr.w	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2204      	movs	r2, #4
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2204      	movs	r2, #4
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2210      	movs	r2, #16
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d043      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d03c      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2210      	movs	r2, #16
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d018      	beq.n	80022ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d108      	bne.n	80022bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d024      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e01f      	b.n	80022fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e016      	b.n	80022fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0208 	bic.w	r2, r2, #8
 80022ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	2220      	movs	r2, #32
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 808f 	beq.w	800242c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8087 	beq.w	800242c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	2220      	movs	r2, #32
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b05      	cmp	r3, #5
 8002334:	d136      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0216 	bic.w	r2, r2, #22
 8002344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_DMA_IRQHandler+0x1da>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0208 	bic.w	r2, r2, #8
 8002374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	223f      	movs	r2, #63	; 0x3f
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d07e      	beq.n	8002498 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	4798      	blx	r3
        }
        return;
 80023a2:	e079      	b.n	8002498 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01d      	beq.n	80023ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10d      	bne.n	80023dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d031      	beq.n	800242c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e02c      	b.n	800242c <HAL_DMA_IRQHandler+0x2a0>
 80023d2:	bf00      	nop
 80023d4:	20000028 	.word	0x20000028
 80023d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e01e      	b.n	800242c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0210 	bic.w	r2, r2, #16
 800240a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	2b00      	cmp	r3, #0
 8002432:	d032      	beq.n	800249a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d022      	beq.n	8002486 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2205      	movs	r2, #5
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	d307      	bcc.n	8002474 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f2      	bne.n	8002458 <HAL_DMA_IRQHandler+0x2cc>
 8002472:	e000      	b.n	8002476 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002474:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
 8002496:	e000      	b.n	800249a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002498:	bf00      	nop
    }
  }
}
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d108      	bne.n	80024e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024de:	e007      	b.n	80024f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3b10      	subs	r3, #16
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <DMA_CalcBaseAndBitshift+0x64>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <DMA_CalcBaseAndBitshift+0x68>)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d909      	bls.n	800253e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	1d1a      	adds	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	; 0x58
 800253c:	e007      	b.n	800254e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	aaaaaaab 	.word	0xaaaaaaab
 8002564:	08005b6c 	.word	0x08005b6c

08002568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11f      	bne.n	80025c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d856      	bhi.n	8002636 <DMA_CheckFifoParam+0xce>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <DMA_CheckFifoParam+0x28>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025b3 	.word	0x080025b3
 8002598:	080025a1 	.word	0x080025a1
 800259c:	08002637 	.word	0x08002637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d046      	beq.n	800263a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b0:	e043      	b.n	800263a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025ba:	d140      	bne.n	800263e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c0:	e03d      	b.n	800263e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ca:	d121      	bne.n	8002610 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d837      	bhi.n	8002642 <DMA_CheckFifoParam+0xda>
 80025d2:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <DMA_CheckFifoParam+0x70>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025ef 	.word	0x080025ef
 80025e0:	080025e9 	.word	0x080025e9
 80025e4:	08002601 	.word	0x08002601
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      break;
 80025ec:	e030      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d025      	beq.n	8002646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fe:	e022      	b.n	8002646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002608:	d11f      	bne.n	800264a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800260e:	e01c      	b.n	800264a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d903      	bls.n	800261e <DMA_CheckFifoParam+0xb6>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d003      	beq.n	8002624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800261c:	e018      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      break;
 8002622:	e015      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e00b      	b.n	800264e <DMA_CheckFifoParam+0xe6>
      break;
 8002636:	bf00      	nop
 8002638:	e00a      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e008      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e006      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e004      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;   
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
    }
  } 
  
  return status; 
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e165      	b.n	8002948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 8154 	bne.w	8002942 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d005      	beq.n	80026b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d130      	bne.n	8002714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 0201 	and.w	r2, r3, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b03      	cmp	r3, #3
 800271e:	d017      	beq.n	8002750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d123      	bne.n	80027a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80ae 	beq.w	8002942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <HAL_GPIO_Init+0x300>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_GPIO_Init+0x300>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_GPIO_Init+0x300>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002802:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_GPIO_Init+0x304>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_GPIO_Init+0x308>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d025      	beq.n	800287a <HAL_GPIO_Init+0x21a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_GPIO_Init+0x30c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01f      	beq.n	8002876 <HAL_GPIO_Init+0x216>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_GPIO_Init+0x310>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d019      	beq.n	8002872 <HAL_GPIO_Init+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_GPIO_Init+0x314>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_GPIO_Init+0x318>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x20a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4a      	ldr	r2, [pc, #296]	; (800297c <HAL_GPIO_Init+0x31c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x206>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a49      	ldr	r2, [pc, #292]	; (8002980 <HAL_GPIO_Init+0x320>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x202>
 800285e:	2306      	movs	r3, #6
 8002860:	e00c      	b.n	800287c <HAL_GPIO_Init+0x21c>
 8002862:	2307      	movs	r3, #7
 8002864:	e00a      	b.n	800287c <HAL_GPIO_Init+0x21c>
 8002866:	2305      	movs	r3, #5
 8002868:	e008      	b.n	800287c <HAL_GPIO_Init+0x21c>
 800286a:	2304      	movs	r3, #4
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x21c>
 800286e:	2303      	movs	r3, #3
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x21c>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x21c>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x21c>
 800287a:	2300      	movs	r3, #0
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	; (8002964 <HAL_GPIO_Init+0x304>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_GPIO_Init+0x324>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_GPIO_Init+0x324>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_GPIO_Init+0x324>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_GPIO_Init+0x324>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_GPIO_Init+0x324>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <HAL_GPIO_Init+0x324>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_GPIO_Init+0x324>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800293c:	4a11      	ldr	r2, [pc, #68]	; (8002984 <HAL_GPIO_Init+0x324>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f67f ae96 	bls.w	800267c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40013800 	.word	0x40013800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40021400 	.word	0x40021400
 8002980:	40021800 	.word	0x40021800
 8002984:	40013c00 	.word	0x40013c00

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe fe62 	bl	8001774 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe fe5e 	bl	8001774 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 f855 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fdc2 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08005b54 	.word	0x08005b54
 8002b80:	20000028 	.word	0x20000028
 8002b84:	2000002c 	.word	0x2000002c

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000028 	.word	0x20000028

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08005b64 	.word	0x08005b64

08002bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bcc:	f7ff ffdc 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0b5b      	lsrs	r3, r3, #13
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08005b64 	.word	0x08005b64

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b0ae      	sub	sp, #184	; 0xb8
 8002bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c16:	4bcb      	ldr	r3, [pc, #812]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	f200 8206 	bhi.w	8003030 <HAL_RCC_GetSysClockFreq+0x440>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08003031 	.word	0x08003031
 8002c34:	08003031 	.word	0x08003031
 8002c38:	08003031 	.word	0x08003031
 8002c3c:	08002c69 	.word	0x08002c69
 8002c40:	08003031 	.word	0x08003031
 8002c44:	08003031 	.word	0x08003031
 8002c48:	08003031 	.word	0x08003031
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08003031 	.word	0x08003031
 8002c54:	08003031 	.word	0x08003031
 8002c58:	08003031 	.word	0x08003031
 8002c5c:	08002e61 	.word	0x08002e61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4bb9      	ldr	r3, [pc, #740]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c66:	e1e7      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4bb8      	ldr	r3, [pc, #736]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c6e:	e1e3      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c70:	4bb4      	ldr	r3, [pc, #720]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7c:	4bb1      	ldr	r3, [pc, #708]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d071      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c88:	4bae      	ldr	r3, [pc, #696]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	0159      	lsls	r1, r3, #5
 8002cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc0:	0150      	lsls	r0, r2, #5
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	6439      	str	r1, [r7, #64]	; 0x40
 8002ccc:	4629      	mov	r1, r5
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cea:	4641      	mov	r1, r8
 8002cec:	018a      	lsls	r2, r1, #6
 8002cee:	4641      	mov	r1, r8
 8002cf0:	1a51      	subs	r1, r2, r1
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d08:	4649      	mov	r1, r9
 8002d0a:	00cb      	lsls	r3, r1, #3
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d12:	4641      	mov	r1, r8
 8002d14:	00ca      	lsls	r2, r1, #3
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
 8002d22:	462b      	mov	r3, r5
 8002d24:	460a      	mov	r2, r1
 8002d26:	eb42 0303 	adc.w	r3, r2, r3
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d38:	4629      	mov	r1, r5
 8002d3a:	024b      	lsls	r3, r1, #9
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d42:	4621      	mov	r1, r4
 8002d44:	024a      	lsls	r2, r1, #9
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d5c:	f7fd fe9e 	bl	8000a9c <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4613      	mov	r3, r2
 8002d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d6a:	e067      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d86:	2300      	movs	r3, #0
 8002d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	1a51      	subs	r1, r2, r1
 8002daa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dac:	4629      	mov	r1, r5
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	018b      	lsls	r3, r1, #6
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dca:	4641      	mov	r1, r8
 8002dcc:	018a      	lsls	r2, r1, #6
 8002dce:	4641      	mov	r1, r8
 8002dd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002de6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dee:	4692      	mov	sl, r2
 8002df0:	469b      	mov	fp, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb1a 0303 	adds.w	r3, sl, r3
 8002df8:	623b      	str	r3, [r7, #32]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	028b      	lsls	r3, r1, #10
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e18:	4621      	mov	r1, r4
 8002e1a:	028a      	lsls	r2, r1, #10
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e24:	2200      	movs	r2, #0
 8002e26:	673b      	str	r3, [r7, #112]	; 0x70
 8002e28:	677a      	str	r2, [r7, #116]	; 0x74
 8002e2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e2e:	f7fd fe35 	bl	8000a9c <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4613      	mov	r3, r2
 8002e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e3c:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e5e:	e0eb      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d06b      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e94:	4622      	mov	r2, r4
 8002e96:	462b      	mov	r3, r5
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	0159      	lsls	r1, r3, #5
 8002ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea6:	0150      	lsls	r0, r2, #5
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4621      	mov	r1, r4
 8002eae:	1a51      	subs	r1, r2, r1
 8002eb0:	61b9      	str	r1, [r7, #24]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ec6:	4659      	mov	r1, fp
 8002ec8:	018b      	lsls	r3, r1, #6
 8002eca:	4651      	mov	r1, sl
 8002ecc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	018a      	lsls	r2, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ebb2 0801 	subs.w	r8, r2, r1
 8002eda:	4659      	mov	r1, fp
 8002edc:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef4:	4690      	mov	r8, r2
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	eb18 0303 	adds.w	r3, r8, r3
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	462b      	mov	r3, r5
 8002f02:	eb49 0303 	adc.w	r3, r9, r3
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f14:	4629      	mov	r1, r5
 8002f16:	024b      	lsls	r3, r1, #9
 8002f18:	4621      	mov	r1, r4
 8002f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1e:	4621      	mov	r1, r4
 8002f20:	024a      	lsls	r2, r1, #9
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f34:	f7fd fdb2 	bl	8000a9c <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f42:	e065      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x420>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f60:	653b      	str	r3, [r7, #80]	; 0x50
 8002f62:	2300      	movs	r3, #0
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
 8002f66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4641      	mov	r1, r8
 8002f84:	1a51      	subs	r1, r2, r1
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	4649      	mov	r1, r9
 8002f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	018b      	lsls	r3, r1, #6
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	018a      	lsls	r2, r1, #6
 8002faa:	4651      	mov	r1, sl
 8002fac:	1a54      	subs	r4, r2, r1
 8002fae:	4659      	mov	r1, fp
 8002fb0:	eb63 0501 	sbc.w	r5, r3, r1
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	00eb      	lsls	r3, r5, #3
 8002fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc2:	00e2      	lsls	r2, r4, #3
 8002fc4:	4614      	mov	r4, r2
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	4643      	mov	r3, r8
 8002fca:	18e3      	adds	r3, r4, r3
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb45 0303 	adc.w	r3, r5, r3
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	028b      	lsls	r3, r1, #10
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fec:	4621      	mov	r1, r4
 8002fee:	028a      	lsls	r2, r1, #10
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003002:	f7fd fd4b 	bl	8000a9c <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4613      	mov	r3, r2
 800300c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_RCC_GetSysClockFreq+0x458>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0f1b      	lsrs	r3, r3, #28
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800301e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800302e:	e003      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003036:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800303c:	4618      	mov	r0, r3
 800303e:	37b8      	adds	r7, #184	; 0xb8
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	00f42400 	.word	0x00f42400

08003050 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e28d      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8083 	beq.w	8003176 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003070:	4b94      	ldr	r3, [pc, #592]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d019      	beq.n	80030b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800307c:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003084:	2b08      	cmp	r3, #8
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003088:	4b8e      	ldr	r3, [pc, #568]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05b      	beq.n	8003174 <HAL_RCC_OscConfig+0x124>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d157      	bne.n	8003174 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e25a      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x90>
 80030d2:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7b      	ldr	r2, [pc, #492]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xcc>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0xb4>
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a75      	ldr	r2, [pc, #468]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a72      	ldr	r2, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xcc>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6b      	ldr	r2, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fb26 	bl	8001774 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fb22 	bl	8001774 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e21f      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xdc>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe fb12 	bl	8001774 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe fb0e 	bl	8001774 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e20b      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x104>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d06f      	beq.n	8003262 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003182:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x186>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1d3      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4937      	ldr	r1, [pc, #220]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e03a      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_RCC_OscConfig+0x278>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe fabb 	bl	8001774 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003202:	f7fe fab7 	bl	8001774 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e1b4      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4925      	ldr	r1, [pc, #148]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e015      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_OscConfig+0x278>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fa9a 	bl	8001774 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe fa96 	bl	8001774 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e193      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fa7a 	bl	8001774 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe fa76 	bl	8001774 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e173      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x234>
 80032a2:	e01b      	b.n	80032dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_OscConfig+0x27c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fa63 	bl	8001774 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e00e      	b.n	80032d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fa5f 	bl	8001774 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d907      	bls.n	80032d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e15c      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b8a      	ldr	r3, [pc, #552]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ea      	bne.n	80032b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8097 	beq.w	8003418 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b83      	ldr	r3, [pc, #524]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a7e      	ldr	r2, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b79      	ldr	r3, [pc, #484]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fe fa1f 	bl	8001774 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe fa1b 	bl	8001774 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e118      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x4b0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x31e>
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	e01c      	b.n	80033a8 <HAL_RCC_OscConfig+0x358>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b05      	cmp	r3, #5
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x340>
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a60      	ldr	r2, [pc, #384]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
 8003382:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a5d      	ldr	r2, [pc, #372]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0x358>
 8003390:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a59      	ldr	r2, [pc, #356]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	4b57      	ldr	r3, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe f9e0 	bl	8001774 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f9dc 	bl	8001774 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0d7      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RCC_OscConfig+0x368>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe f9ca 	bl	8001774 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe f9c6 	bl	8001774 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0c1      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340c:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	4a3a      	ldr	r2, [pc, #232]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80ad 	beq.w	800357c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d060      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d145      	bne.n	80034c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_RCC_OscConfig+0x4b4>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe f99a 	bl	8001774 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe f996 	bl	8001774 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e093      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	071b      	lsls	r3, r3, #28
 800348e:	491b      	ldr	r1, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4b4>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe f96b 	bl	8001774 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe f967 	bl	8001774 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e064      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x452>
 80034c0:	e05c      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_OscConfig+0x4b4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f954 	bl	8001774 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe f950 	bl	8001774 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04d      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x480>
 80034ee:	e045      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e040      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000
 8003504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_RCC_OscConfig+0x538>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d030      	beq.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d129      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d122      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003540:	4293      	cmp	r3, r2
 8003542:	d119      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	3b01      	subs	r3, #1
 8003552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d10f      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd ff00 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fa96 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d001      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e04e      	b.n	80036e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d022      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366e:	d01d      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d018      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_TIM_Base_Start_IT+0xd0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00e      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_TIM_Base_Start_IT+0xd4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_TIM_Base_Start_IT+0xd8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0x80>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_TIM_Base_Start_IT+0xdc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d111      	bne.n	80036d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d010      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	e007      	b.n	80036e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40010400 	.word	0x40010400
 8003704:	40014000 	.word	0x40014000
 8003708:	40001800 	.word	0x40001800

0800370c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9b5 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9a7 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f9b8 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0204 	mvn.w	r2, #4
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f98b 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f97d 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f98e 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0208 	mvn.w	r2, #8
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f961 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f953 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f964 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2208      	movs	r2, #8
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f937 	bl	8003abe <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f929 	bl	8003aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f93a 	bl	8003ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0201 	mvn.w	r2, #1
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fa9a 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fae0 	bl	8003e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d10e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d107      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8ff 	bl	8003ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b20      	cmp	r3, #32
 8003902:	d107      	bne.n	8003914 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0220 	mvn.w	r2, #32
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 faaa 	bl	8003e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIM_ConfigClockSource+0x1c>
 8003934:	2302      	movs	r3, #2
 8003936:	e0b4      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x186>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	d03e      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003976:	f200 8087 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	f000 8086 	beq.w	8003a8e <HAL_TIM_ConfigClockSource+0x172>
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d87f      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b70      	cmp	r3, #112	; 0x70
 800398a:	d01a      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xa6>
 800398c:	2b70      	cmp	r3, #112	; 0x70
 800398e:	d87b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d050      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x11a>
 8003994:	2b60      	cmp	r3, #96	; 0x60
 8003996:	d877      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d03c      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xfa>
 800399c:	2b50      	cmp	r3, #80	; 0x50
 800399e:	d873      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d058      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x13a>
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d86f      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d064      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15a>
 80039ac:	2b30      	cmp	r3, #48	; 0x30
 80039ae:	d86b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d060      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15a>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d867      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05c      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15a>
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d05a      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x15a>
 80039c0:	e062      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6899      	ldr	r1, [r3, #8]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f000 f9ad 	bl	8003d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	609a      	str	r2, [r3, #8]
      break;
 80039ee:	e04f      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f000 f996 	bl	8003d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e03c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 f90a 	bl	8003c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2150      	movs	r1, #80	; 0x50
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f963 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a34:	e02c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 f929 	bl	8003c9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2160      	movs	r1, #96	; 0x60
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f953 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a54:	e01c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 f8ea 	bl	8003c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f943 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a74:	e00c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f000 f93a 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003a86:	e003      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e000      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d00f      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <TIM_Base_SetConfig+0x118>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <TIM_Base_SetConfig+0x11c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <TIM_Base_SetConfig+0x120>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d027      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <TIM_Base_SetConfig+0x118>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d023      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <TIM_Base_SetConfig+0x11c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <TIM_Base_SetConfig+0x120>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <TIM_Base_SetConfig+0x128>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <TIM_Base_SetConfig+0x138>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40010400 	.word	0x40010400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	40001800 	.word	0x40001800
 8003c34:	40001c00 	.word	0x40001c00
 8003c38:	40002000 	.word	0x40002000

08003c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0210 	bic.w	r2, r3, #16
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e05a      	b.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d01d      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10c      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40000c00 	.word	0x40000c00
 8003e5c:	40010400 	.word	0x40010400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40001800 	.word	0x40001800

08003e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e03f      	b.n	8003f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd faa4 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2224      	movs	r2, #36	; 0x24
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 ff11 	bl	8004cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	; 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d165      	bne.n	8004012 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_UART_Transmit_DMA+0x26>
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e05e      	b.n	8004014 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Transmit_DMA+0x38>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e057      	b.n	8004014 <HAL_UART_Transmit_DMA+0xe8>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2221      	movs	r2, #33	; 0x21
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_UART_Transmit_DMA+0xf0>)
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	4a21      	ldr	r2, [pc, #132]	; (8004020 <HAL_UART_Transmit_DMA+0xf4>)
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_UART_Transmit_DMA+0xf8>)
 8003fa2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	2200      	movs	r2, #0
 8003faa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003fac:	f107 0308 	add.w	r3, r7, #8
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	f7fd fff8 	bl	8001fb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffa:	627a      	str	r2, [r7, #36]	; 0x24
 8003ffc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6a39      	ldr	r1, [r7, #32]
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	61fb      	str	r3, [r7, #28]
   return(result);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3730      	adds	r7, #48	; 0x30
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	0800482d 	.word	0x0800482d
 8004020:	080048c7 	.word	0x080048c7
 8004024:	080048e3 	.word	0x080048e3

08004028 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b09d      	sub	sp, #116	; 0x74
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004030:	2300      	movs	r3, #0
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_UART_DMAPause+0x1a>
 800403e:	2302      	movs	r3, #2
 8004040:	e098      	b.n	8004174 <HAL_UART_DMAPause+0x14c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b21      	cmp	r3, #33	; 0x21
 800406a:	d11c      	bne.n	80040a6 <HAL_UART_DMAPause+0x7e>
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d019      	beq.n	80040a6 <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004092:	65ba      	str	r2, [r7, #88]	; 0x58
 8004094:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b22      	cmp	r3, #34	; 0x22
 80040c6:	d150      	bne.n	800416a <HAL_UART_DMAPause+0x142>
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04d      	beq.n	800416a <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	667b      	str	r3, [r7, #100]	; 0x64
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040ee:	647a      	str	r2, [r7, #68]	; 0x44
 80040f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e5      	bne.n	80040ce <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	623b      	str	r3, [r7, #32]
   return(result);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004122:	633a      	str	r2, [r7, #48]	; 0x30
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	60fb      	str	r3, [r7, #12]
   return(result);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004156:	61fa      	str	r2, [r7, #28]
 8004158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	69b9      	ldr	r1, [r7, #24]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	617b      	str	r3, [r7, #20]
   return(result);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3774      	adds	r7, #116	; 0x74
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b09d      	sub	sp, #116	; 0x74
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_UART_DMAResume+0x16>
 8004192:	2302      	movs	r3, #2
 8004194:	e08b      	b.n	80042ae <HAL_UART_DMAResume+0x12e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b21      	cmp	r3, #33	; 0x21
 80041a8:	d119      	bne.n	80041de <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b22      	cmp	r3, #34	; 0x22
 80041e8:	d15c      	bne.n	80042a4 <HAL_UART_DMAResume+0x124>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d019      	beq.n	800423c <HAL_UART_DMAResume+0xbc>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004228:	64ba      	str	r2, [r7, #72]	; 0x48
 800422a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800422e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <HAL_UART_DMAResume+0x88>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3314      	adds	r3, #20
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	667b      	str	r3, [r7, #100]	; 0x64
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800425c:	637a      	str	r2, [r7, #52]	; 0x34
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <HAL_UART_DMAResume+0xbc>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	613b      	str	r3, [r7, #16]
   return(result);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004286:	663b      	str	r3, [r7, #96]	; 0x60
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004290:	623a      	str	r2, [r7, #32]
 8004292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	61bb      	str	r3, [r7, #24]
   return(result);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <HAL_UART_DMAResume+0xf0>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3774      	adds	r7, #116	; 0x74
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b0ba      	sub	sp, #232	; 0xe8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_UART_IRQHandler+0x66>
 800430e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fc32 	bl	8004b84 <UART_Receive_IT>
      return;
 8004320:	e256      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80de 	beq.w	80044e8 <HAL_UART_IRQHandler+0x22c>
 800432c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80d1 	beq.w	80044e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_UART_IRQHandler+0xae>
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_UART_IRQHandler+0xd2>
 8004376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_UART_IRQHandler+0xf6>
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0204 	orr.w	r2, r3, #4
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d011      	beq.n	80043e2 <HAL_UART_IRQHandler+0x126>
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0208 	orr.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 81ed 	beq.w	80047c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_UART_IRQHandler+0x14e>
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fbbd 	bl	8004b84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_UART_IRQHandler+0x17a>
 800442e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04f      	beq.n	80044d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fac5 	bl	80049c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d141      	bne.n	80044ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800447a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800448e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1d9      	bne.n	800444a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	d013      	beq.n	80044c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	4a7d      	ldr	r2, [pc, #500]	; (8004698 <HAL_UART_IRQHandler+0x3dc>)
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fe4c 	bl	8002148 <HAL_DMA_Abort_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c0:	4610      	mov	r0, r2
 80044c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e00e      	b.n	80044e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f99a 	bl	8004800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e00a      	b.n	80044e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f996 	bl	8004800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e006      	b.n	80044e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f992 	bl	8004800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044e2:	e170      	b.n	80047c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	bf00      	nop
    return;
 80044e6:	e16e      	b.n	80047c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 814a 	bne.w	8004786 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8143 	beq.w	8004786 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 813c 	beq.w	8004786 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	f040 80b4 	bne.w	800469c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8140 	beq.w	80047ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800454e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004552:	429a      	cmp	r2, r3
 8004554:	f080 8139 	bcs.w	80047ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800455e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	f000 8088 	beq.w	800467e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1d9      	bne.n	800456e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e1      	bne.n	80045ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3314      	adds	r3, #20
 8004616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800461a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800461c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e3      	bne.n	80045f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800464c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464e:	f023 0310 	bic.w	r3, r3, #16
 8004652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004660:	65ba      	str	r2, [r7, #88]	; 0x58
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e3      	bne.n	800463c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	4618      	mov	r0, r3
 800467a:	f7fd fcf5 	bl	8002068 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004686:	b29b      	uxth	r3, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8c0 	bl	8004814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004694:	e099      	b.n	80047ca <HAL_UART_IRQHandler+0x50e>
 8004696:	bf00      	nop
 8004698:	08004a8d 	.word	0x08004a8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 808b 	beq.w	80047ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8086 	beq.w	80047ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046e6:	647a      	str	r2, [r7, #68]	; 0x44
 80046e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e3      	bne.n	80046c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	623b      	str	r3, [r7, #32]
   return(result);
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800471e:	633a      	str	r2, [r7, #48]	; 0x30
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0310 	bic.w	r3, r3, #16
 8004756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004764:	61fa      	str	r2, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	617b      	str	r3, [r7, #20]
   return(result);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e3      	bne.n	8004740 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f848 	bl	8004814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004784:	e023      	b.n	80047ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_UART_IRQHandler+0x4ea>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f988 	bl	8004ab4 <UART_Transmit_IT>
    return;
 80047a4:	e014      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <HAL_UART_IRQHandler+0x514>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f9c8 	bl	8004b54 <UART_EndTransmit_IT>
    return;
 80047c4:	e004      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
    return;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ce:	bf00      	nop
  }
}
 80047d0:	37e8      	adds	r7, #232	; 0xe8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop

080047d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b090      	sub	sp, #64	; 0x40
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d137      	bne.n	80048b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	2200      	movs	r2, #0
 800484c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	623b      	str	r3, [r7, #32]
   return(result);
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800486e:	633a      	str	r2, [r7, #48]	; 0x30
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	60fb      	str	r3, [r7, #12]
   return(result);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a2:	61fa      	str	r2, [r7, #28]
 80048a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	617b      	str	r3, [r7, #20]
   return(result);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e5      	bne.n	8004882 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048b6:	e002      	b.n	80048be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80048b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80048ba:	f7fc fa71 	bl	8000da0 <HAL_UART_TxCpltCallback>
}
 80048be:	bf00      	nop
 80048c0:	3740      	adds	r7, #64	; 0x40
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff ff7f 	bl	80047d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b21      	cmp	r3, #33	; 0x21
 8004914:	d108      	bne.n	8004928 <UART_DMAError+0x46>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f000 f827 	bl	8004976 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b22      	cmp	r3, #34	; 0x22
 8004948:	d108      	bne.n	800495c <UART_DMAError+0x7a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f000 f835 	bl	80049c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f043 0210 	orr.w	r2, r3, #16
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f7ff ff49 	bl	8004800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b089      	sub	sp, #36	; 0x24
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	60bb      	str	r3, [r7, #8]
   return(result);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	61ba      	str	r2, [r7, #24]
 80049a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6979      	ldr	r1, [r7, #20]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	613b      	str	r3, [r7, #16]
   return(result);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b095      	sub	sp, #84	; 0x54
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ee:	643a      	str	r2, [r7, #64]	; 0x40
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e5      	bne.n	80049ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3314      	adds	r3, #20
 8004a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e5      	bne.n	8004a02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d119      	bne.n	8004a72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0310 	bic.w	r3, r3, #16
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a5e:	61ba      	str	r2, [r7, #24]
 8004a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e5      	bne.n	8004a3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a80:	bf00      	nop
 8004a82:	3754      	adds	r7, #84	; 0x54
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff feaa 	bl	8004800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b21      	cmp	r3, #33	; 0x21
 8004ac6:	d13e      	bne.n	8004b46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad0:	d114      	bne.n	8004afc <UART_Transmit_IT+0x48>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d110      	bne.n	8004afc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	1c9a      	adds	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]
 8004afa:	e008      	b.n	8004b0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	1c59      	adds	r1, r3, #1
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6211      	str	r1, [r2, #32]
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e000      	b.n	8004b48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b46:	2302      	movs	r3, #2
  }
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fc f913 	bl	8000da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b22      	cmp	r3, #34	; 0x22
 8004b96:	f040 80ab 	bne.w	8004cf0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d117      	bne.n	8004bd4 <UART_Receive_IT+0x50>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d113      	bne.n	8004bd4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd2:	e026      	b.n	8004c22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d007      	beq.n	8004bf8 <UART_Receive_IT+0x74>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <UART_Receive_IT+0x82>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e008      	b.n	8004c18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d15a      	bne.n	8004cec <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0220 	bic.w	r2, r2, #32
 8004c44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d135      	bne.n	8004ce2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	623a      	str	r2, [r7, #32]
 8004c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69f9      	ldr	r1, [r7, #28]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d10a      	bne.n	8004cd4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fd9a 	bl	8004814 <HAL_UARTEx_RxEventCallback>
 8004ce0:	e002      	b.n	8004ce8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fd82 	bl	80047ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e002      	b.n	8004cf2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3730      	adds	r7, #48	; 0x30
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d00:	b0c0      	sub	sp, #256	; 0x100
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	68d9      	ldr	r1, [r3, #12]
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	ea40 0301 	orr.w	r3, r0, r1
 8004d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d54:	f021 010c 	bic.w	r1, r1, #12
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d62:	430b      	orrs	r3, r1
 8004d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	6999      	ldr	r1, [r3, #24]
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	ea40 0301 	orr.w	r3, r0, r1
 8004d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b8f      	ldr	r3, [pc, #572]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d005      	beq.n	8004d9c <UART_SetConfig+0xa0>
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b8d      	ldr	r3, [pc, #564]	; (8004fcc <UART_SetConfig+0x2d0>)
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d104      	bne.n	8004da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d9c:	f7fd ff14 	bl	8002bc8 <HAL_RCC_GetPCLK2Freq>
 8004da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004da4:	e003      	b.n	8004dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004da6:	f7fd fefb 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8004daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db8:	f040 810c 	bne.w	8004fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dce:	4622      	mov	r2, r4
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	1891      	adds	r1, r2, r2
 8004dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dde:	4621      	mov	r1, r4
 8004de0:	eb12 0801 	adds.w	r8, r2, r1
 8004de4:	4629      	mov	r1, r5
 8004de6:	eb43 0901 	adc.w	r9, r3, r1
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfe:	4690      	mov	r8, r2
 8004e00:	4699      	mov	r9, r3
 8004e02:	4623      	mov	r3, r4
 8004e04:	eb18 0303 	adds.w	r3, r8, r3
 8004e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	eb49 0303 	adc.w	r3, r9, r3
 8004e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	18db      	adds	r3, r3, r3
 8004e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e30:	4613      	mov	r3, r2
 8004e32:	eb42 0303 	adc.w	r3, r2, r3
 8004e36:	657b      	str	r3, [r7, #84]	; 0x54
 8004e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e40:	f7fb fe2c 	bl	8000a9c <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <UART_SetConfig+0x2d4>)
 8004e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	011c      	lsls	r4, r3, #4
 8004e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	1891      	adds	r1, r2, r2
 8004e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e6c:	415b      	adcs	r3, r3
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e74:	4641      	mov	r1, r8
 8004e76:	eb12 0a01 	adds.w	sl, r2, r1
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e94:	4692      	mov	sl, r2
 8004e96:	469b      	mov	fp, r3
 8004e98:	4643      	mov	r3, r8
 8004e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	18db      	adds	r3, r3, r3
 8004ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	eb42 0303 	adc.w	r3, r2, r3
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ed6:	f7fb fde1 	bl	8000a9c <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <UART_SetConfig+0x2d4>)
 8004ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2264      	movs	r2, #100	; 0x64
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	1acb      	subs	r3, r1, r3
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ef6:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <UART_SetConfig+0x2d4>)
 8004ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f04:	441c      	add	r4, r3
 8004f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	1891      	adds	r1, r2, r2
 8004f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f20:	415b      	adcs	r3, r3
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f28:	4641      	mov	r1, r8
 8004f2a:	1851      	adds	r1, r2, r1
 8004f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f2e:	4649      	mov	r1, r9
 8004f30:	414b      	adcs	r3, r1
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f40:	4659      	mov	r1, fp
 8004f42:	00cb      	lsls	r3, r1, #3
 8004f44:	4651      	mov	r1, sl
 8004f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f4a:	4651      	mov	r1, sl
 8004f4c:	00ca      	lsls	r2, r1, #3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	4642      	mov	r2, r8
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	460a      	mov	r2, r1
 8004f60:	eb42 0303 	adc.w	r3, r2, r3
 8004f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	18db      	adds	r3, r3, r3
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f82:	4613      	mov	r3, r2
 8004f84:	eb42 0303 	adc.w	r3, r2, r3
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f92:	f7fb fd83 	bl	8000a9c <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <UART_SetConfig+0x2d4>)
 8004f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	2164      	movs	r1, #100	; 0x64
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	3332      	adds	r3, #50	; 0x32
 8004fae:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <UART_SetConfig+0x2d4>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 0207 	and.w	r2, r3, #7
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4422      	add	r2, r4
 8004fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc4:	e105      	b.n	80051d2 <UART_SetConfig+0x4d6>
 8004fc6:	bf00      	nop
 8004fc8:	40011000 	.word	0x40011000
 8004fcc:	40011400 	.word	0x40011400
 8004fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fe6:	4642      	mov	r2, r8
 8004fe8:	464b      	mov	r3, r9
 8004fea:	1891      	adds	r1, r2, r2
 8004fec:	6239      	str	r1, [r7, #32]
 8004fee:	415b      	adcs	r3, r3
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	1854      	adds	r4, r2, r1
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	eb43 0501 	adc.w	r5, r3, r1
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	00eb      	lsls	r3, r5, #3
 800500a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800500e:	00e2      	lsls	r2, r4, #3
 8005010:	4614      	mov	r4, r2
 8005012:	461d      	mov	r5, r3
 8005014:	4643      	mov	r3, r8
 8005016:	18e3      	adds	r3, r4, r3
 8005018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800501c:	464b      	mov	r3, r9
 800501e:	eb45 0303 	adc.w	r3, r5, r3
 8005022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005042:	4629      	mov	r1, r5
 8005044:	008b      	lsls	r3, r1, #2
 8005046:	4621      	mov	r1, r4
 8005048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504c:	4621      	mov	r1, r4
 800504e:	008a      	lsls	r2, r1, #2
 8005050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005054:	f7fb fd22 	bl	8000a9c <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4b60      	ldr	r3, [pc, #384]	; (80051e0 <UART_SetConfig+0x4e4>)
 800505e:	fba3 2302 	umull	r2, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	011c      	lsls	r4, r3, #4
 8005066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	1891      	adds	r1, r2, r2
 800507e:	61b9      	str	r1, [r7, #24]
 8005080:	415b      	adcs	r3, r3
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005088:	4641      	mov	r1, r8
 800508a:	1851      	adds	r1, r2, r1
 800508c:	6139      	str	r1, [r7, #16]
 800508e:	4649      	mov	r1, r9
 8005090:	414b      	adcs	r3, r1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a0:	4659      	mov	r1, fp
 80050a2:	00cb      	lsls	r3, r1, #3
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050aa:	4651      	mov	r1, sl
 80050ac:	00ca      	lsls	r2, r1, #3
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	4642      	mov	r2, r8
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050bc:	464b      	mov	r3, r9
 80050be:	460a      	mov	r2, r1
 80050c0:	eb42 0303 	adc.w	r3, r2, r3
 80050c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050e0:	4649      	mov	r1, r9
 80050e2:	008b      	lsls	r3, r1, #2
 80050e4:	4641      	mov	r1, r8
 80050e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ea:	4641      	mov	r1, r8
 80050ec:	008a      	lsls	r2, r1, #2
 80050ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050f2:	f7fb fcd3 	bl	8000a9c <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <UART_SetConfig+0x4e4>)
 80050fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	2164      	movs	r1, #100	; 0x64
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	3332      	adds	r3, #50	; 0x32
 800510e:	4a34      	ldr	r2, [pc, #208]	; (80051e0 <UART_SetConfig+0x4e4>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800511a:	441c      	add	r4, r3
 800511c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005120:	2200      	movs	r2, #0
 8005122:	673b      	str	r3, [r7, #112]	; 0x70
 8005124:	677a      	str	r2, [r7, #116]	; 0x74
 8005126:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800512a:	4642      	mov	r2, r8
 800512c:	464b      	mov	r3, r9
 800512e:	1891      	adds	r1, r2, r2
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	415b      	adcs	r3, r3
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800513a:	4641      	mov	r1, r8
 800513c:	1851      	adds	r1, r2, r1
 800513e:	6039      	str	r1, [r7, #0]
 8005140:	4649      	mov	r1, r9
 8005142:	414b      	adcs	r3, r1
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005152:	4659      	mov	r1, fp
 8005154:	00cb      	lsls	r3, r1, #3
 8005156:	4651      	mov	r1, sl
 8005158:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515c:	4651      	mov	r1, sl
 800515e:	00ca      	lsls	r2, r1, #3
 8005160:	4610      	mov	r0, r2
 8005162:	4619      	mov	r1, r3
 8005164:	4603      	mov	r3, r0
 8005166:	4642      	mov	r2, r8
 8005168:	189b      	adds	r3, r3, r2
 800516a:	66bb      	str	r3, [r7, #104]	; 0x68
 800516c:	464b      	mov	r3, r9
 800516e:	460a      	mov	r2, r1
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	663b      	str	r3, [r7, #96]	; 0x60
 8005180:	667a      	str	r2, [r7, #100]	; 0x64
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800518e:	4649      	mov	r1, r9
 8005190:	008b      	lsls	r3, r1, #2
 8005192:	4641      	mov	r1, r8
 8005194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005198:	4641      	mov	r1, r8
 800519a:	008a      	lsls	r2, r1, #2
 800519c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051a0:	f7fb fc7c 	bl	8000a9c <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <UART_SetConfig+0x4e4>)
 80051aa:	fba3 1302 	umull	r1, r3, r3, r2
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2164      	movs	r1, #100	; 0x64
 80051b2:	fb01 f303 	mul.w	r3, r1, r3
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	3332      	adds	r3, #50	; 0x32
 80051bc:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <UART_SetConfig+0x4e4>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	f003 020f 	and.w	r2, r3, #15
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4422      	add	r2, r4
 80051d0:	609a      	str	r2, [r3, #8]
}
 80051d2:	bf00      	nop
 80051d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051d8:	46bd      	mov	sp, r7
 80051da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051de:	bf00      	nop
 80051e0:	51eb851f 	.word	0x51eb851f

080051e4 <__errno>:
 80051e4:	4b01      	ldr	r3, [pc, #4]	; (80051ec <__errno+0x8>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000034 	.word	0x20000034

080051f0 <__libc_init_array>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	4d0d      	ldr	r5, [pc, #52]	; (8005228 <__libc_init_array+0x38>)
 80051f4:	4c0d      	ldr	r4, [pc, #52]	; (800522c <__libc_init_array+0x3c>)
 80051f6:	1b64      	subs	r4, r4, r5
 80051f8:	10a4      	asrs	r4, r4, #2
 80051fa:	2600      	movs	r6, #0
 80051fc:	42a6      	cmp	r6, r4
 80051fe:	d109      	bne.n	8005214 <__libc_init_array+0x24>
 8005200:	4d0b      	ldr	r5, [pc, #44]	; (8005230 <__libc_init_array+0x40>)
 8005202:	4c0c      	ldr	r4, [pc, #48]	; (8005234 <__libc_init_array+0x44>)
 8005204:	f000 fc8e 	bl	8005b24 <_init>
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	2600      	movs	r6, #0
 800520e:	42a6      	cmp	r6, r4
 8005210:	d105      	bne.n	800521e <__libc_init_array+0x2e>
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	f855 3b04 	ldr.w	r3, [r5], #4
 8005218:	4798      	blx	r3
 800521a:	3601      	adds	r6, #1
 800521c:	e7ee      	b.n	80051fc <__libc_init_array+0xc>
 800521e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005222:	4798      	blx	r3
 8005224:	3601      	adds	r6, #1
 8005226:	e7f2      	b.n	800520e <__libc_init_array+0x1e>
 8005228:	08005bb0 	.word	0x08005bb0
 800522c:	08005bb0 	.word	0x08005bb0
 8005230:	08005bb0 	.word	0x08005bb0
 8005234:	08005bb4 	.word	0x08005bb4

08005238 <memset>:
 8005238:	4402      	add	r2, r0
 800523a:	4603      	mov	r3, r0
 800523c:	4293      	cmp	r3, r2
 800523e:	d100      	bne.n	8005242 <memset+0xa>
 8005240:	4770      	bx	lr
 8005242:	f803 1b01 	strb.w	r1, [r3], #1
 8005246:	e7f9      	b.n	800523c <memset+0x4>

08005248 <siprintf>:
 8005248:	b40e      	push	{r1, r2, r3}
 800524a:	b500      	push	{lr}
 800524c:	b09c      	sub	sp, #112	; 0x70
 800524e:	ab1d      	add	r3, sp, #116	; 0x74
 8005250:	9002      	str	r0, [sp, #8]
 8005252:	9006      	str	r0, [sp, #24]
 8005254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005258:	4809      	ldr	r0, [pc, #36]	; (8005280 <siprintf+0x38>)
 800525a:	9107      	str	r1, [sp, #28]
 800525c:	9104      	str	r1, [sp, #16]
 800525e:	4909      	ldr	r1, [pc, #36]	; (8005284 <siprintf+0x3c>)
 8005260:	f853 2b04 	ldr.w	r2, [r3], #4
 8005264:	9105      	str	r1, [sp, #20]
 8005266:	6800      	ldr	r0, [r0, #0]
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	a902      	add	r1, sp, #8
 800526c:	f000 f868 	bl	8005340 <_svfiprintf_r>
 8005270:	9b02      	ldr	r3, [sp, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	b01c      	add	sp, #112	; 0x70
 8005278:	f85d eb04 	ldr.w	lr, [sp], #4
 800527c:	b003      	add	sp, #12
 800527e:	4770      	bx	lr
 8005280:	20000034 	.word	0x20000034
 8005284:	ffff0208 	.word	0xffff0208

08005288 <__ssputs_r>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	688e      	ldr	r6, [r1, #8]
 800528e:	429e      	cmp	r6, r3
 8005290:	4682      	mov	sl, r0
 8005292:	460c      	mov	r4, r1
 8005294:	4690      	mov	r8, r2
 8005296:	461f      	mov	r7, r3
 8005298:	d838      	bhi.n	800530c <__ssputs_r+0x84>
 800529a:	898a      	ldrh	r2, [r1, #12]
 800529c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a0:	d032      	beq.n	8005308 <__ssputs_r+0x80>
 80052a2:	6825      	ldr	r5, [r4, #0]
 80052a4:	6909      	ldr	r1, [r1, #16]
 80052a6:	eba5 0901 	sub.w	r9, r5, r1
 80052aa:	6965      	ldr	r5, [r4, #20]
 80052ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b4:	3301      	adds	r3, #1
 80052b6:	444b      	add	r3, r9
 80052b8:	106d      	asrs	r5, r5, #1
 80052ba:	429d      	cmp	r5, r3
 80052bc:	bf38      	it	cc
 80052be:	461d      	movcc	r5, r3
 80052c0:	0553      	lsls	r3, r2, #21
 80052c2:	d531      	bpl.n	8005328 <__ssputs_r+0xa0>
 80052c4:	4629      	mov	r1, r5
 80052c6:	f000 fb63 	bl	8005990 <_malloc_r>
 80052ca:	4606      	mov	r6, r0
 80052cc:	b950      	cbnz	r0, 80052e4 <__ssputs_r+0x5c>
 80052ce:	230c      	movs	r3, #12
 80052d0:	f8ca 3000 	str.w	r3, [sl]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052da:	81a3      	strh	r3, [r4, #12]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	6921      	ldr	r1, [r4, #16]
 80052e6:	464a      	mov	r2, r9
 80052e8:	f000 fabe 	bl	8005868 <memcpy>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	6126      	str	r6, [r4, #16]
 80052fa:	6165      	str	r5, [r4, #20]
 80052fc:	444e      	add	r6, r9
 80052fe:	eba5 0509 	sub.w	r5, r5, r9
 8005302:	6026      	str	r6, [r4, #0]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	463e      	mov	r6, r7
 8005308:	42be      	cmp	r6, r7
 800530a:	d900      	bls.n	800530e <__ssputs_r+0x86>
 800530c:	463e      	mov	r6, r7
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	4632      	mov	r2, r6
 8005312:	4641      	mov	r1, r8
 8005314:	f000 fab6 	bl	8005884 <memmove>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4433      	add	r3, r6
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2000      	movs	r0, #0
 8005326:	e7db      	b.n	80052e0 <__ssputs_r+0x58>
 8005328:	462a      	mov	r2, r5
 800532a:	f000 fba5 	bl	8005a78 <_realloc_r>
 800532e:	4606      	mov	r6, r0
 8005330:	2800      	cmp	r0, #0
 8005332:	d1e1      	bne.n	80052f8 <__ssputs_r+0x70>
 8005334:	6921      	ldr	r1, [r4, #16]
 8005336:	4650      	mov	r0, sl
 8005338:	f000 fabe 	bl	80058b8 <_free_r>
 800533c:	e7c7      	b.n	80052ce <__ssputs_r+0x46>
	...

08005340 <_svfiprintf_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	4698      	mov	r8, r3
 8005346:	898b      	ldrh	r3, [r1, #12]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	b09d      	sub	sp, #116	; 0x74
 800534c:	4607      	mov	r7, r0
 800534e:	460d      	mov	r5, r1
 8005350:	4614      	mov	r4, r2
 8005352:	d50e      	bpl.n	8005372 <_svfiprintf_r+0x32>
 8005354:	690b      	ldr	r3, [r1, #16]
 8005356:	b963      	cbnz	r3, 8005372 <_svfiprintf_r+0x32>
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	f000 fb19 	bl	8005990 <_malloc_r>
 800535e:	6028      	str	r0, [r5, #0]
 8005360:	6128      	str	r0, [r5, #16]
 8005362:	b920      	cbnz	r0, 800536e <_svfiprintf_r+0x2e>
 8005364:	230c      	movs	r3, #12
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800536c:	e0d1      	b.n	8005512 <_svfiprintf_r+0x1d2>
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	616b      	str	r3, [r5, #20]
 8005372:	2300      	movs	r3, #0
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
 8005376:	2320      	movs	r3, #32
 8005378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800537c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005380:	2330      	movs	r3, #48	; 0x30
 8005382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800552c <_svfiprintf_r+0x1ec>
 8005386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800538a:	f04f 0901 	mov.w	r9, #1
 800538e:	4623      	mov	r3, r4
 8005390:	469a      	mov	sl, r3
 8005392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005396:	b10a      	cbz	r2, 800539c <_svfiprintf_r+0x5c>
 8005398:	2a25      	cmp	r2, #37	; 0x25
 800539a:	d1f9      	bne.n	8005390 <_svfiprintf_r+0x50>
 800539c:	ebba 0b04 	subs.w	fp, sl, r4
 80053a0:	d00b      	beq.n	80053ba <_svfiprintf_r+0x7a>
 80053a2:	465b      	mov	r3, fp
 80053a4:	4622      	mov	r2, r4
 80053a6:	4629      	mov	r1, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ff6d 	bl	8005288 <__ssputs_r>
 80053ae:	3001      	adds	r0, #1
 80053b0:	f000 80aa 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b6:	445a      	add	r2, fp
 80053b8:	9209      	str	r2, [sp, #36]	; 0x24
 80053ba:	f89a 3000 	ldrb.w	r3, [sl]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80a2 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ce:	f10a 0a01 	add.w	sl, sl, #1
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	9307      	str	r3, [sp, #28]
 80053d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053da:	931a      	str	r3, [sp, #104]	; 0x68
 80053dc:	4654      	mov	r4, sl
 80053de:	2205      	movs	r2, #5
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	4851      	ldr	r0, [pc, #324]	; (800552c <_svfiprintf_r+0x1ec>)
 80053e6:	f7fa ff1b 	bl	8000220 <memchr>
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	b9d8      	cbnz	r0, 8005426 <_svfiprintf_r+0xe6>
 80053ee:	06d0      	lsls	r0, r2, #27
 80053f0:	bf44      	itt	mi
 80053f2:	2320      	movmi	r3, #32
 80053f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f8:	0711      	lsls	r1, r2, #28
 80053fa:	bf44      	itt	mi
 80053fc:	232b      	movmi	r3, #43	; 0x2b
 80053fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005402:	f89a 3000 	ldrb.w	r3, [sl]
 8005406:	2b2a      	cmp	r3, #42	; 0x2a
 8005408:	d015      	beq.n	8005436 <_svfiprintf_r+0xf6>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4654      	mov	r4, sl
 800540e:	2000      	movs	r0, #0
 8005410:	f04f 0c0a 	mov.w	ip, #10
 8005414:	4621      	mov	r1, r4
 8005416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800541a:	3b30      	subs	r3, #48	; 0x30
 800541c:	2b09      	cmp	r3, #9
 800541e:	d94e      	bls.n	80054be <_svfiprintf_r+0x17e>
 8005420:	b1b0      	cbz	r0, 8005450 <_svfiprintf_r+0x110>
 8005422:	9207      	str	r2, [sp, #28]
 8005424:	e014      	b.n	8005450 <_svfiprintf_r+0x110>
 8005426:	eba0 0308 	sub.w	r3, r0, r8
 800542a:	fa09 f303 	lsl.w	r3, r9, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	46a2      	mov	sl, r4
 8005434:	e7d2      	b.n	80053dc <_svfiprintf_r+0x9c>
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	1d19      	adds	r1, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9103      	str	r1, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfbb      	ittet	lt
 8005442:	425b      	neglt	r3, r3
 8005444:	f042 0202 	orrlt.w	r2, r2, #2
 8005448:	9307      	strge	r3, [sp, #28]
 800544a:	9307      	strlt	r3, [sp, #28]
 800544c:	bfb8      	it	lt
 800544e:	9204      	strlt	r2, [sp, #16]
 8005450:	7823      	ldrb	r3, [r4, #0]
 8005452:	2b2e      	cmp	r3, #46	; 0x2e
 8005454:	d10c      	bne.n	8005470 <_svfiprintf_r+0x130>
 8005456:	7863      	ldrb	r3, [r4, #1]
 8005458:	2b2a      	cmp	r3, #42	; 0x2a
 800545a:	d135      	bne.n	80054c8 <_svfiprintf_r+0x188>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	9203      	str	r2, [sp, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfb8      	it	lt
 8005468:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800546c:	3402      	adds	r4, #2
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800553c <_svfiprintf_r+0x1fc>
 8005474:	7821      	ldrb	r1, [r4, #0]
 8005476:	2203      	movs	r2, #3
 8005478:	4650      	mov	r0, sl
 800547a:	f7fa fed1 	bl	8000220 <memchr>
 800547e:	b140      	cbz	r0, 8005492 <_svfiprintf_r+0x152>
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	eba0 000a 	sub.w	r0, r0, sl
 8005486:	fa03 f000 	lsl.w	r0, r3, r0
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	4303      	orrs	r3, r0
 800548e:	3401      	adds	r4, #1
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005496:	4826      	ldr	r0, [pc, #152]	; (8005530 <_svfiprintf_r+0x1f0>)
 8005498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800549c:	2206      	movs	r2, #6
 800549e:	f7fa febf 	bl	8000220 <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d038      	beq.n	8005518 <_svfiprintf_r+0x1d8>
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <_svfiprintf_r+0x1f4>)
 80054a8:	bb1b      	cbnz	r3, 80054f2 <_svfiprintf_r+0x1b2>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3307      	adds	r3, #7
 80054ae:	f023 0307 	bic.w	r3, r3, #7
 80054b2:	3308      	adds	r3, #8
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	4433      	add	r3, r6
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	e767      	b.n	800538e <_svfiprintf_r+0x4e>
 80054be:	fb0c 3202 	mla	r2, ip, r2, r3
 80054c2:	460c      	mov	r4, r1
 80054c4:	2001      	movs	r0, #1
 80054c6:	e7a5      	b.n	8005414 <_svfiprintf_r+0xd4>
 80054c8:	2300      	movs	r3, #0
 80054ca:	3401      	adds	r4, #1
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	4619      	mov	r1, r3
 80054d0:	f04f 0c0a 	mov.w	ip, #10
 80054d4:	4620      	mov	r0, r4
 80054d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054da:	3a30      	subs	r2, #48	; 0x30
 80054dc:	2a09      	cmp	r2, #9
 80054de:	d903      	bls.n	80054e8 <_svfiprintf_r+0x1a8>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0c5      	beq.n	8005470 <_svfiprintf_r+0x130>
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	e7c3      	b.n	8005470 <_svfiprintf_r+0x130>
 80054e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ec:	4604      	mov	r4, r0
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7f0      	b.n	80054d4 <_svfiprintf_r+0x194>
 80054f2:	ab03      	add	r3, sp, #12
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	462a      	mov	r2, r5
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <_svfiprintf_r+0x1f8>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	4638      	mov	r0, r7
 80054fe:	f3af 8000 	nop.w
 8005502:	1c42      	adds	r2, r0, #1
 8005504:	4606      	mov	r6, r0
 8005506:	d1d6      	bne.n	80054b6 <_svfiprintf_r+0x176>
 8005508:	89ab      	ldrh	r3, [r5, #12]
 800550a:	065b      	lsls	r3, r3, #25
 800550c:	f53f af2c 	bmi.w	8005368 <_svfiprintf_r+0x28>
 8005510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005512:	b01d      	add	sp, #116	; 0x74
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	ab03      	add	r3, sp, #12
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	462a      	mov	r2, r5
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <_svfiprintf_r+0x1f8>)
 8005520:	a904      	add	r1, sp, #16
 8005522:	4638      	mov	r0, r7
 8005524:	f000 f87a 	bl	800561c <_printf_i>
 8005528:	e7eb      	b.n	8005502 <_svfiprintf_r+0x1c2>
 800552a:	bf00      	nop
 800552c:	08005b74 	.word	0x08005b74
 8005530:	08005b7e 	.word	0x08005b7e
 8005534:	00000000 	.word	0x00000000
 8005538:	08005289 	.word	0x08005289
 800553c:	08005b7a 	.word	0x08005b7a

08005540 <_printf_common>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	4699      	mov	r9, r3
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	690b      	ldr	r3, [r1, #16]
 800554c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005550:	4293      	cmp	r3, r2
 8005552:	bfb8      	it	lt
 8005554:	4613      	movlt	r3, r2
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555c:	4607      	mov	r7, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b10a      	cbz	r2, 8005566 <_printf_common+0x26>
 8005562:	3301      	adds	r3, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	0699      	lsls	r1, r3, #26
 800556a:	bf42      	ittt	mi
 800556c:	6833      	ldrmi	r3, [r6, #0]
 800556e:	3302      	addmi	r3, #2
 8005570:	6033      	strmi	r3, [r6, #0]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d106      	bne.n	8005588 <_printf_common+0x48>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc26      	bgt.n	80055d6 <_printf_common+0x96>
 8005588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800558c:	1e13      	subs	r3, r2, #0
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	bf18      	it	ne
 8005592:	2301      	movne	r3, #1
 8005594:	0692      	lsls	r2, r2, #26
 8005596:	d42b      	bmi.n	80055f0 <_printf_common+0xb0>
 8005598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d01e      	beq.n	80055e4 <_printf_common+0xa4>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	68e5      	ldr	r5, [r4, #12]
 80055aa:	6832      	ldr	r2, [r6, #0]
 80055ac:	f003 0306 	and.w	r3, r3, #6
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	bf08      	it	eq
 80055b4:	1aad      	subeq	r5, r5, r2
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	bf0c      	ite	eq
 80055bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c0:	2500      	movne	r5, #0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bfc4      	itt	gt
 80055c6:	1a9b      	subgt	r3, r3, r2
 80055c8:	18ed      	addgt	r5, r5, r3
 80055ca:	2600      	movs	r6, #0
 80055cc:	341a      	adds	r4, #26
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	d11a      	bne.n	8005608 <_printf_common+0xc8>
 80055d2:	2000      	movs	r0, #0
 80055d4:	e008      	b.n	80055e8 <_printf_common+0xa8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4652      	mov	r2, sl
 80055da:	4649      	mov	r1, r9
 80055dc:	4638      	mov	r0, r7
 80055de:	47c0      	blx	r8
 80055e0:	3001      	adds	r0, #1
 80055e2:	d103      	bne.n	80055ec <_printf_common+0xac>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	3501      	adds	r5, #1
 80055ee:	e7c6      	b.n	800557e <_printf_common+0x3e>
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	2030      	movs	r0, #48	; 0x30
 80055f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fa:	4422      	add	r2, r4
 80055fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005604:	3302      	adds	r3, #2
 8005606:	e7c7      	b.n	8005598 <_printf_common+0x58>
 8005608:	2301      	movs	r3, #1
 800560a:	4622      	mov	r2, r4
 800560c:	4649      	mov	r1, r9
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d0e6      	beq.n	80055e4 <_printf_common+0xa4>
 8005616:	3601      	adds	r6, #1
 8005618:	e7d9      	b.n	80055ce <_printf_common+0x8e>
	...

0800561c <_printf_i>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	7e0f      	ldrb	r7, [r1, #24]
 8005622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005624:	2f78      	cmp	r7, #120	; 0x78
 8005626:	4691      	mov	r9, r2
 8005628:	4680      	mov	r8, r0
 800562a:	460c      	mov	r4, r1
 800562c:	469a      	mov	sl, r3
 800562e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005632:	d807      	bhi.n	8005644 <_printf_i+0x28>
 8005634:	2f62      	cmp	r7, #98	; 0x62
 8005636:	d80a      	bhi.n	800564e <_printf_i+0x32>
 8005638:	2f00      	cmp	r7, #0
 800563a:	f000 80d8 	beq.w	80057ee <_printf_i+0x1d2>
 800563e:	2f58      	cmp	r7, #88	; 0x58
 8005640:	f000 80a3 	beq.w	800578a <_printf_i+0x16e>
 8005644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800564c:	e03a      	b.n	80056c4 <_printf_i+0xa8>
 800564e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005652:	2b15      	cmp	r3, #21
 8005654:	d8f6      	bhi.n	8005644 <_printf_i+0x28>
 8005656:	a101      	add	r1, pc, #4	; (adr r1, 800565c <_printf_i+0x40>)
 8005658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800565c:	080056b5 	.word	0x080056b5
 8005660:	080056c9 	.word	0x080056c9
 8005664:	08005645 	.word	0x08005645
 8005668:	08005645 	.word	0x08005645
 800566c:	08005645 	.word	0x08005645
 8005670:	08005645 	.word	0x08005645
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005645 	.word	0x08005645
 800567c:	08005645 	.word	0x08005645
 8005680:	08005645 	.word	0x08005645
 8005684:	08005645 	.word	0x08005645
 8005688:	080057d5 	.word	0x080057d5
 800568c:	080056f9 	.word	0x080056f9
 8005690:	080057b7 	.word	0x080057b7
 8005694:	08005645 	.word	0x08005645
 8005698:	08005645 	.word	0x08005645
 800569c:	080057f7 	.word	0x080057f7
 80056a0:	08005645 	.word	0x08005645
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005645 	.word	0x08005645
 80056ac:	08005645 	.word	0x08005645
 80056b0:	080057bf 	.word	0x080057bf
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0a3      	b.n	8005810 <_printf_i+0x1f4>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	6829      	ldr	r1, [r5, #0]
 80056cc:	0606      	lsls	r6, r0, #24
 80056ce:	f101 0304 	add.w	r3, r1, #4
 80056d2:	d50a      	bpl.n	80056ea <_printf_i+0xce>
 80056d4:	680e      	ldr	r6, [r1, #0]
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	2e00      	cmp	r6, #0
 80056da:	da03      	bge.n	80056e4 <_printf_i+0xc8>
 80056dc:	232d      	movs	r3, #45	; 0x2d
 80056de:	4276      	negs	r6, r6
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	485e      	ldr	r0, [pc, #376]	; (8005860 <_printf_i+0x244>)
 80056e6:	230a      	movs	r3, #10
 80056e8:	e019      	b.n	800571e <_printf_i+0x102>
 80056ea:	680e      	ldr	r6, [r1, #0]
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056f2:	bf18      	it	ne
 80056f4:	b236      	sxthne	r6, r6
 80056f6:	e7ef      	b.n	80056d8 <_printf_i+0xbc>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1d19      	adds	r1, r3, #4
 80056fe:	6029      	str	r1, [r5, #0]
 8005700:	0601      	lsls	r1, r0, #24
 8005702:	d501      	bpl.n	8005708 <_printf_i+0xec>
 8005704:	681e      	ldr	r6, [r3, #0]
 8005706:	e002      	b.n	800570e <_printf_i+0xf2>
 8005708:	0646      	lsls	r6, r0, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0xe8>
 800570c:	881e      	ldrh	r6, [r3, #0]
 800570e:	4854      	ldr	r0, [pc, #336]	; (8005860 <_printf_i+0x244>)
 8005710:	2f6f      	cmp	r7, #111	; 0x6f
 8005712:	bf0c      	ite	eq
 8005714:	2308      	moveq	r3, #8
 8005716:	230a      	movne	r3, #10
 8005718:	2100      	movs	r1, #0
 800571a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800571e:	6865      	ldr	r5, [r4, #4]
 8005720:	60a5      	str	r5, [r4, #8]
 8005722:	2d00      	cmp	r5, #0
 8005724:	bfa2      	ittt	ge
 8005726:	6821      	ldrge	r1, [r4, #0]
 8005728:	f021 0104 	bicge.w	r1, r1, #4
 800572c:	6021      	strge	r1, [r4, #0]
 800572e:	b90e      	cbnz	r6, 8005734 <_printf_i+0x118>
 8005730:	2d00      	cmp	r5, #0
 8005732:	d04d      	beq.n	80057d0 <_printf_i+0x1b4>
 8005734:	4615      	mov	r5, r2
 8005736:	fbb6 f1f3 	udiv	r1, r6, r3
 800573a:	fb03 6711 	mls	r7, r3, r1, r6
 800573e:	5dc7      	ldrb	r7, [r0, r7]
 8005740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005744:	4637      	mov	r7, r6
 8005746:	42bb      	cmp	r3, r7
 8005748:	460e      	mov	r6, r1
 800574a:	d9f4      	bls.n	8005736 <_printf_i+0x11a>
 800574c:	2b08      	cmp	r3, #8
 800574e:	d10b      	bne.n	8005768 <_printf_i+0x14c>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	07de      	lsls	r6, r3, #31
 8005754:	d508      	bpl.n	8005768 <_printf_i+0x14c>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	6861      	ldr	r1, [r4, #4]
 800575a:	4299      	cmp	r1, r3
 800575c:	bfde      	ittt	le
 800575e:	2330      	movle	r3, #48	; 0x30
 8005760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005764:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005768:	1b52      	subs	r2, r2, r5
 800576a:	6122      	str	r2, [r4, #16]
 800576c:	f8cd a000 	str.w	sl, [sp]
 8005770:	464b      	mov	r3, r9
 8005772:	aa03      	add	r2, sp, #12
 8005774:	4621      	mov	r1, r4
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff fee2 	bl	8005540 <_printf_common>
 800577c:	3001      	adds	r0, #1
 800577e:	d14c      	bne.n	800581a <_printf_i+0x1fe>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005784:	b004      	add	sp, #16
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	4835      	ldr	r0, [pc, #212]	; (8005860 <_printf_i+0x244>)
 800578c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005790:	6829      	ldr	r1, [r5, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f851 6b04 	ldr.w	r6, [r1], #4
 8005798:	6029      	str	r1, [r5, #0]
 800579a:	061d      	lsls	r5, r3, #24
 800579c:	d514      	bpl.n	80057c8 <_printf_i+0x1ac>
 800579e:	07df      	lsls	r7, r3, #31
 80057a0:	bf44      	itt	mi
 80057a2:	f043 0320 	orrmi.w	r3, r3, #32
 80057a6:	6023      	strmi	r3, [r4, #0]
 80057a8:	b91e      	cbnz	r6, 80057b2 <_printf_i+0x196>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f023 0320 	bic.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	2310      	movs	r3, #16
 80057b4:	e7b0      	b.n	8005718 <_printf_i+0xfc>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2378      	movs	r3, #120	; 0x78
 80057c0:	4828      	ldr	r0, [pc, #160]	; (8005864 <_printf_i+0x248>)
 80057c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c6:	e7e3      	b.n	8005790 <_printf_i+0x174>
 80057c8:	0659      	lsls	r1, r3, #25
 80057ca:	bf48      	it	mi
 80057cc:	b2b6      	uxthmi	r6, r6
 80057ce:	e7e6      	b.n	800579e <_printf_i+0x182>
 80057d0:	4615      	mov	r5, r2
 80057d2:	e7bb      	b.n	800574c <_printf_i+0x130>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	6826      	ldr	r6, [r4, #0]
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	1d18      	adds	r0, r3, #4
 80057dc:	6028      	str	r0, [r5, #0]
 80057de:	0635      	lsls	r5, r6, #24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1cc>
 80057e4:	6019      	str	r1, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1d2>
 80057e8:	0670      	lsls	r0, r6, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x1c8>
 80057ec:	8019      	strh	r1, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	4615      	mov	r5, r2
 80057f4:	e7ba      	b.n	800576c <_printf_i+0x150>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	602a      	str	r2, [r5, #0]
 80057fc:	681d      	ldr	r5, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	4628      	mov	r0, r5
 8005804:	f7fa fd0c 	bl	8000220 <memchr>
 8005808:	b108      	cbz	r0, 800580e <_printf_i+0x1f2>
 800580a:	1b40      	subs	r0, r0, r5
 800580c:	6060      	str	r0, [r4, #4]
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	2300      	movs	r3, #0
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	e7a8      	b.n	800576c <_printf_i+0x150>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	462a      	mov	r2, r5
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d0ab      	beq.n	8005780 <_printf_i+0x164>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d413      	bmi.n	8005856 <_printf_i+0x23a>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e7a4      	b.n	8005784 <_printf_i+0x168>
 800583a:	2301      	movs	r3, #1
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d09b      	beq.n	8005780 <_printf_i+0x164>
 8005848:	3501      	adds	r5, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	42ab      	cmp	r3, r5
 8005852:	dcf2      	bgt.n	800583a <_printf_i+0x21e>
 8005854:	e7eb      	b.n	800582e <_printf_i+0x212>
 8005856:	2500      	movs	r5, #0
 8005858:	f104 0619 	add.w	r6, r4, #25
 800585c:	e7f5      	b.n	800584a <_printf_i+0x22e>
 800585e:	bf00      	nop
 8005860:	08005b85 	.word	0x08005b85
 8005864:	08005b96 	.word	0x08005b96

08005868 <memcpy>:
 8005868:	440a      	add	r2, r1
 800586a:	4291      	cmp	r1, r2
 800586c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005870:	d100      	bne.n	8005874 <memcpy+0xc>
 8005872:	4770      	bx	lr
 8005874:	b510      	push	{r4, lr}
 8005876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800587e:	4291      	cmp	r1, r2
 8005880:	d1f9      	bne.n	8005876 <memcpy+0xe>
 8005882:	bd10      	pop	{r4, pc}

08005884 <memmove>:
 8005884:	4288      	cmp	r0, r1
 8005886:	b510      	push	{r4, lr}
 8005888:	eb01 0402 	add.w	r4, r1, r2
 800588c:	d902      	bls.n	8005894 <memmove+0x10>
 800588e:	4284      	cmp	r4, r0
 8005890:	4623      	mov	r3, r4
 8005892:	d807      	bhi.n	80058a4 <memmove+0x20>
 8005894:	1e43      	subs	r3, r0, #1
 8005896:	42a1      	cmp	r1, r4
 8005898:	d008      	beq.n	80058ac <memmove+0x28>
 800589a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800589e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058a2:	e7f8      	b.n	8005896 <memmove+0x12>
 80058a4:	4402      	add	r2, r0
 80058a6:	4601      	mov	r1, r0
 80058a8:	428a      	cmp	r2, r1
 80058aa:	d100      	bne.n	80058ae <memmove+0x2a>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058b6:	e7f7      	b.n	80058a8 <memmove+0x24>

080058b8 <_free_r>:
 80058b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ba:	2900      	cmp	r1, #0
 80058bc:	d044      	beq.n	8005948 <_free_r+0x90>
 80058be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c2:	9001      	str	r0, [sp, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ca:	bfb8      	it	lt
 80058cc:	18e4      	addlt	r4, r4, r3
 80058ce:	f000 f913 	bl	8005af8 <__malloc_lock>
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <_free_r+0x94>)
 80058d4:	9801      	ldr	r0, [sp, #4]
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	b933      	cbnz	r3, 80058e8 <_free_r+0x30>
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	b003      	add	sp, #12
 80058e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058e4:	f000 b90e 	b.w	8005b04 <__malloc_unlock>
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x46>
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1949      	addeq	r1, r1, r5
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	e7ed      	b.n	80058da <_free_r+0x22>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x50>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x46>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1855      	adds	r5, r2, r1
 800590c:	42a5      	cmp	r5, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x70>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	4421      	add	r1, r4
 8005914:	1854      	adds	r4, r2, r1
 8005916:	42a3      	cmp	r3, r4
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1e0      	bne.n	80058de <_free_r+0x26>
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4421      	add	r1, r4
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	e7da      	b.n	80058de <_free_r+0x26>
 8005928:	d902      	bls.n	8005930 <_free_r+0x78>
 800592a:	230c      	movs	r3, #12
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	e7d6      	b.n	80058de <_free_r+0x26>
 8005930:	6825      	ldr	r5, [r4, #0]
 8005932:	1961      	adds	r1, r4, r5
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1949      	addeq	r1, r1, r5
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7ca      	b.n	80058de <_free_r+0x26>
 8005948:	b003      	add	sp, #12
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	20000298 	.word	0x20000298

08005950 <sbrk_aligned>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4e0e      	ldr	r6, [pc, #56]	; (800598c <sbrk_aligned+0x3c>)
 8005954:	460c      	mov	r4, r1
 8005956:	6831      	ldr	r1, [r6, #0]
 8005958:	4605      	mov	r5, r0
 800595a:	b911      	cbnz	r1, 8005962 <sbrk_aligned+0x12>
 800595c:	f000 f8bc 	bl	8005ad8 <_sbrk_r>
 8005960:	6030      	str	r0, [r6, #0]
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f8b7 	bl	8005ad8 <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d00a      	beq.n	8005984 <sbrk_aligned+0x34>
 800596e:	1cc4      	adds	r4, r0, #3
 8005970:	f024 0403 	bic.w	r4, r4, #3
 8005974:	42a0      	cmp	r0, r4
 8005976:	d007      	beq.n	8005988 <sbrk_aligned+0x38>
 8005978:	1a21      	subs	r1, r4, r0
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f8ac 	bl	8005ad8 <_sbrk_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d101      	bne.n	8005988 <sbrk_aligned+0x38>
 8005984:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005988:	4620      	mov	r0, r4
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	2000029c 	.word	0x2000029c

08005990 <_malloc_r>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	1ccd      	adds	r5, r1, #3
 8005996:	f025 0503 	bic.w	r5, r5, #3
 800599a:	3508      	adds	r5, #8
 800599c:	2d0c      	cmp	r5, #12
 800599e:	bf38      	it	cc
 80059a0:	250c      	movcc	r5, #12
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	4607      	mov	r7, r0
 80059a6:	db01      	blt.n	80059ac <_malloc_r+0x1c>
 80059a8:	42a9      	cmp	r1, r5
 80059aa:	d905      	bls.n	80059b8 <_malloc_r+0x28>
 80059ac:	230c      	movs	r3, #12
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	2600      	movs	r6, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b8:	4e2e      	ldr	r6, [pc, #184]	; (8005a74 <_malloc_r+0xe4>)
 80059ba:	f000 f89d 	bl	8005af8 <__malloc_lock>
 80059be:	6833      	ldr	r3, [r6, #0]
 80059c0:	461c      	mov	r4, r3
 80059c2:	bb34      	cbnz	r4, 8005a12 <_malloc_r+0x82>
 80059c4:	4629      	mov	r1, r5
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff ffc2 	bl	8005950 <sbrk_aligned>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	4604      	mov	r4, r0
 80059d0:	d14d      	bne.n	8005a6e <_malloc_r+0xde>
 80059d2:	6834      	ldr	r4, [r6, #0]
 80059d4:	4626      	mov	r6, r4
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d140      	bne.n	8005a5c <_malloc_r+0xcc>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	4631      	mov	r1, r6
 80059de:	4638      	mov	r0, r7
 80059e0:	eb04 0803 	add.w	r8, r4, r3
 80059e4:	f000 f878 	bl	8005ad8 <_sbrk_r>
 80059e8:	4580      	cmp	r8, r0
 80059ea:	d13a      	bne.n	8005a62 <_malloc_r+0xd2>
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	3503      	adds	r5, #3
 80059f0:	1a6d      	subs	r5, r5, r1
 80059f2:	f025 0503 	bic.w	r5, r5, #3
 80059f6:	3508      	adds	r5, #8
 80059f8:	2d0c      	cmp	r5, #12
 80059fa:	bf38      	it	cc
 80059fc:	250c      	movcc	r5, #12
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ffa5 	bl	8005950 <sbrk_aligned>
 8005a06:	3001      	adds	r0, #1
 8005a08:	d02b      	beq.n	8005a62 <_malloc_r+0xd2>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	442b      	add	r3, r5
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	e00e      	b.n	8005a30 <_malloc_r+0xa0>
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	d41e      	bmi.n	8005a56 <_malloc_r+0xc6>
 8005a18:	2a0b      	cmp	r2, #11
 8005a1a:	d916      	bls.n	8005a4a <_malloc_r+0xba>
 8005a1c:	1961      	adds	r1, r4, r5
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	6025      	str	r5, [r4, #0]
 8005a22:	bf18      	it	ne
 8005a24:	6059      	strne	r1, [r3, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	bf08      	it	eq
 8005a2a:	6031      	streq	r1, [r6, #0]
 8005a2c:	5162      	str	r2, [r4, r5]
 8005a2e:	604b      	str	r3, [r1, #4]
 8005a30:	4638      	mov	r0, r7
 8005a32:	f104 060b 	add.w	r6, r4, #11
 8005a36:	f000 f865 	bl	8005b04 <__malloc_unlock>
 8005a3a:	f026 0607 	bic.w	r6, r6, #7
 8005a3e:	1d23      	adds	r3, r4, #4
 8005a40:	1af2      	subs	r2, r6, r3
 8005a42:	d0b6      	beq.n	80059b2 <_malloc_r+0x22>
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	50a3      	str	r3, [r4, r2]
 8005a48:	e7b3      	b.n	80059b2 <_malloc_r+0x22>
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	bf0c      	ite	eq
 8005a50:	6032      	streq	r2, [r6, #0]
 8005a52:	605a      	strne	r2, [r3, #4]
 8005a54:	e7ec      	b.n	8005a30 <_malloc_r+0xa0>
 8005a56:	4623      	mov	r3, r4
 8005a58:	6864      	ldr	r4, [r4, #4]
 8005a5a:	e7b2      	b.n	80059c2 <_malloc_r+0x32>
 8005a5c:	4634      	mov	r4, r6
 8005a5e:	6876      	ldr	r6, [r6, #4]
 8005a60:	e7b9      	b.n	80059d6 <_malloc_r+0x46>
 8005a62:	230c      	movs	r3, #12
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	4638      	mov	r0, r7
 8005a68:	f000 f84c 	bl	8005b04 <__malloc_unlock>
 8005a6c:	e7a1      	b.n	80059b2 <_malloc_r+0x22>
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	e7de      	b.n	8005a30 <_malloc_r+0xa0>
 8005a72:	bf00      	nop
 8005a74:	20000298 	.word	0x20000298

08005a78 <_realloc_r>:
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	4614      	mov	r4, r2
 8005a80:	460e      	mov	r6, r1
 8005a82:	b921      	cbnz	r1, 8005a8e <_realloc_r+0x16>
 8005a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a88:	4611      	mov	r1, r2
 8005a8a:	f7ff bf81 	b.w	8005990 <_malloc_r>
 8005a8e:	b92a      	cbnz	r2, 8005a9c <_realloc_r+0x24>
 8005a90:	f7ff ff12 	bl	80058b8 <_free_r>
 8005a94:	4625      	mov	r5, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	f000 f838 	bl	8005b10 <_malloc_usable_size_r>
 8005aa0:	4284      	cmp	r4, r0
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	d802      	bhi.n	8005aac <_realloc_r+0x34>
 8005aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aaa:	d812      	bhi.n	8005ad2 <_realloc_r+0x5a>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff ff6e 	bl	8005990 <_malloc_r>
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d0ed      	beq.n	8005a96 <_realloc_r+0x1e>
 8005aba:	42bc      	cmp	r4, r7
 8005abc:	4622      	mov	r2, r4
 8005abe:	4631      	mov	r1, r6
 8005ac0:	bf28      	it	cs
 8005ac2:	463a      	movcs	r2, r7
 8005ac4:	f7ff fed0 	bl	8005868 <memcpy>
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7ff fef4 	bl	80058b8 <_free_r>
 8005ad0:	e7e1      	b.n	8005a96 <_realloc_r+0x1e>
 8005ad2:	4635      	mov	r5, r6
 8005ad4:	e7df      	b.n	8005a96 <_realloc_r+0x1e>
	...

08005ad8 <_sbrk_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d06      	ldr	r5, [pc, #24]	; (8005af4 <_sbrk_r+0x1c>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f7fb fd6e 	bl	80015c4 <_sbrk>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_sbrk_r+0x1a>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_sbrk_r+0x1a>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	200002a0 	.word	0x200002a0

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f000 b811 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	200002a4 	.word	0x200002a4

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f000 b80c 	b.w	8005b22 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	200002a4 	.word	0x200002a4

08005b10 <_malloc_usable_size_r>:
 8005b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b14:	1f18      	subs	r0, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfbc      	itt	lt
 8005b1a:	580b      	ldrlt	r3, [r1, r0]
 8005b1c:	18c0      	addlt	r0, r0, r3
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
