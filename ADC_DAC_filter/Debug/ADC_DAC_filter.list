
ADC_DAC_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003434  08003434  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800343c  0800343c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  08003454  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003454  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5a9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001881  00000000  00000000  0002a5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a9e  00000000  00000000  0002ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa57  00000000  00000000  0004e926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2474  00000000  00000000  0005937d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b7f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a0  00000000  00000000  0012b844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003404 	.word	0x08003404

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08003404 	.word	0x08003404

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2iz>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007dc:	d215      	bcs.n	800080a <__aeabi_d2iz+0x36>
 80007de:	d511      	bpl.n	8000804 <__aeabi_d2iz+0x30>
 80007e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d912      	bls.n	8000810 <__aeabi_d2iz+0x3c>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007fa:	fa23 f002 	lsr.w	r0, r3, r2
 80007fe:	bf18      	it	ne
 8000800:	4240      	negne	r0, r0
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080e:	d105      	bne.n	800081c <__aeabi_d2iz+0x48>
 8000810:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000814:	bf08      	it	eq
 8000816:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000834:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000838:	f000 b974 	b.w	8000b24 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	4604      	mov	r4, r0
 800085c:	468e      	mov	lr, r1
 800085e:	2b00      	cmp	r3, #0
 8000860:	d14d      	bne.n	80008fe <__udivmoddi4+0xaa>
 8000862:	428a      	cmp	r2, r1
 8000864:	4694      	mov	ip, r2
 8000866:	d969      	bls.n	800093c <__udivmoddi4+0xe8>
 8000868:	fab2 f282 	clz	r2, r2
 800086c:	b152      	cbz	r2, 8000884 <__udivmoddi4+0x30>
 800086e:	fa01 f302 	lsl.w	r3, r1, r2
 8000872:	f1c2 0120 	rsb	r1, r2, #32
 8000876:	fa20 f101 	lsr.w	r1, r0, r1
 800087a:	fa0c fc02 	lsl.w	ip, ip, r2
 800087e:	ea41 0e03 	orr.w	lr, r1, r3
 8000882:	4094      	lsls	r4, r2
 8000884:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000888:	0c21      	lsrs	r1, r4, #16
 800088a:	fbbe f6f8 	udiv	r6, lr, r8
 800088e:	fa1f f78c 	uxth.w	r7, ip
 8000892:	fb08 e316 	mls	r3, r8, r6, lr
 8000896:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800089a:	fb06 f107 	mul.w	r1, r6, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x64>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008aa:	f080 811f 	bcs.w	8000aec <__udivmoddi4+0x298>
 80008ae:	4299      	cmp	r1, r3
 80008b0:	f240 811c 	bls.w	8000aec <__udivmoddi4+0x298>
 80008b4:	3e02      	subs	r6, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1a5b      	subs	r3, r3, r1
 80008ba:	b2a4      	uxth	r4, r4
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3310 	mls	r3, r8, r0, r3
 80008c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c8:	fb00 f707 	mul.w	r7, r0, r7
 80008cc:	42a7      	cmp	r7, r4
 80008ce:	d90a      	bls.n	80008e6 <__udivmoddi4+0x92>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008d8:	f080 810a 	bcs.w	8000af0 <__udivmoddi4+0x29c>
 80008dc:	42a7      	cmp	r7, r4
 80008de:	f240 8107 	bls.w	8000af0 <__udivmoddi4+0x29c>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ea:	1be4      	subs	r4, r4, r7
 80008ec:	2600      	movs	r6, #0
 80008ee:	b11d      	cbz	r5, 80008f8 <__udivmoddi4+0xa4>
 80008f0:	40d4      	lsrs	r4, r2
 80008f2:	2300      	movs	r3, #0
 80008f4:	e9c5 4300 	strd	r4, r3, [r5]
 80008f8:	4631      	mov	r1, r6
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d909      	bls.n	8000916 <__udivmoddi4+0xc2>
 8000902:	2d00      	cmp	r5, #0
 8000904:	f000 80ef 	beq.w	8000ae6 <__udivmoddi4+0x292>
 8000908:	2600      	movs	r6, #0
 800090a:	e9c5 0100 	strd	r0, r1, [r5]
 800090e:	4630      	mov	r0, r6
 8000910:	4631      	mov	r1, r6
 8000912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000916:	fab3 f683 	clz	r6, r3
 800091a:	2e00      	cmp	r6, #0
 800091c:	d14a      	bne.n	80009b4 <__udivmoddi4+0x160>
 800091e:	428b      	cmp	r3, r1
 8000920:	d302      	bcc.n	8000928 <__udivmoddi4+0xd4>
 8000922:	4282      	cmp	r2, r0
 8000924:	f200 80f9 	bhi.w	8000b1a <__udivmoddi4+0x2c6>
 8000928:	1a84      	subs	r4, r0, r2
 800092a:	eb61 0303 	sbc.w	r3, r1, r3
 800092e:	2001      	movs	r0, #1
 8000930:	469e      	mov	lr, r3
 8000932:	2d00      	cmp	r5, #0
 8000934:	d0e0      	beq.n	80008f8 <__udivmoddi4+0xa4>
 8000936:	e9c5 4e00 	strd	r4, lr, [r5]
 800093a:	e7dd      	b.n	80008f8 <__udivmoddi4+0xa4>
 800093c:	b902      	cbnz	r2, 8000940 <__udivmoddi4+0xec>
 800093e:	deff      	udf	#255	; 0xff
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	2a00      	cmp	r2, #0
 8000946:	f040 8092 	bne.w	8000a6e <__udivmoddi4+0x21a>
 800094a:	eba1 010c 	sub.w	r1, r1, ip
 800094e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	2601      	movs	r6, #1
 8000958:	0c20      	lsrs	r0, r4, #16
 800095a:	fbb1 f3f7 	udiv	r3, r1, r7
 800095e:	fb07 1113 	mls	r1, r7, r3, r1
 8000962:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000966:	fb0e f003 	mul.w	r0, lr, r3
 800096a:	4288      	cmp	r0, r1
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x12c>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x12a>
 8000978:	4288      	cmp	r0, r1
 800097a:	f200 80cb 	bhi.w	8000b14 <__udivmoddi4+0x2c0>
 800097e:	4643      	mov	r3, r8
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f7 	udiv	r0, r1, r7
 8000988:	fb07 1110 	mls	r1, r7, r0, r1
 800098c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000990:	fb0e fe00 	mul.w	lr, lr, r0
 8000994:	45a6      	cmp	lr, r4
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x156>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009a0:	d202      	bcs.n	80009a8 <__udivmoddi4+0x154>
 80009a2:	45a6      	cmp	lr, r4
 80009a4:	f200 80bb 	bhi.w	8000b1e <__udivmoddi4+0x2ca>
 80009a8:	4608      	mov	r0, r1
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009b2:	e79c      	b.n	80008ee <__udivmoddi4+0x9a>
 80009b4:	f1c6 0720 	rsb	r7, r6, #32
 80009b8:	40b3      	lsls	r3, r6
 80009ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80009be:	ea4c 0c03 	orr.w	ip, ip, r3
 80009c2:	fa20 f407 	lsr.w	r4, r0, r7
 80009c6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ca:	431c      	orrs	r4, r3
 80009cc:	40f9      	lsrs	r1, r7
 80009ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d2:	fa00 f306 	lsl.w	r3, r0, r6
 80009d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009da:	0c20      	lsrs	r0, r4, #16
 80009dc:	fa1f fe8c 	uxth.w	lr, ip
 80009e0:	fb09 1118 	mls	r1, r9, r8, r1
 80009e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009e8:	fb08 f00e 	mul.w	r0, r8, lr
 80009ec:	4288      	cmp	r0, r1
 80009ee:	fa02 f206 	lsl.w	r2, r2, r6
 80009f2:	d90b      	bls.n	8000a0c <__udivmoddi4+0x1b8>
 80009f4:	eb1c 0101 	adds.w	r1, ip, r1
 80009f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009fc:	f080 8088 	bcs.w	8000b10 <__udivmoddi4+0x2bc>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f240 8085 	bls.w	8000b10 <__udivmoddi4+0x2bc>
 8000a06:	f1a8 0802 	sub.w	r8, r8, #2
 8000a0a:	4461      	add	r1, ip
 8000a0c:	1a09      	subs	r1, r1, r0
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a14:	fb09 1110 	mls	r1, r9, r0, r1
 8000a18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a20:	458e      	cmp	lr, r1
 8000a22:	d908      	bls.n	8000a36 <__udivmoddi4+0x1e2>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a2c:	d26c      	bcs.n	8000b08 <__udivmoddi4+0x2b4>
 8000a2e:	458e      	cmp	lr, r1
 8000a30:	d96a      	bls.n	8000b08 <__udivmoddi4+0x2b4>
 8000a32:	3802      	subs	r0, #2
 8000a34:	4461      	add	r1, ip
 8000a36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a3e:	eba1 010e 	sub.w	r1, r1, lr
 8000a42:	42a1      	cmp	r1, r4
 8000a44:	46c8      	mov	r8, r9
 8000a46:	46a6      	mov	lr, r4
 8000a48:	d356      	bcc.n	8000af8 <__udivmoddi4+0x2a4>
 8000a4a:	d053      	beq.n	8000af4 <__udivmoddi4+0x2a0>
 8000a4c:	b15d      	cbz	r5, 8000a66 <__udivmoddi4+0x212>
 8000a4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a52:	eb61 010e 	sbc.w	r1, r1, lr
 8000a56:	fa01 f707 	lsl.w	r7, r1, r7
 8000a5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a5e:	40f1      	lsrs	r1, r6
 8000a60:	431f      	orrs	r7, r3
 8000a62:	e9c5 7100 	strd	r7, r1, [r5]
 8000a66:	2600      	movs	r6, #0
 8000a68:	4631      	mov	r1, r6
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	f1c2 0320 	rsb	r3, r2, #32
 8000a72:	40d8      	lsrs	r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa21 f303 	lsr.w	r3, r1, r3
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	4301      	orrs	r1, r0
 8000a80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a90:	0c0b      	lsrs	r3, r1, #16
 8000a92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a96:	fb00 f60e 	mul.w	r6, r0, lr
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x260>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000aaa:	d22f      	bcs.n	8000b0c <__udivmoddi4+0x2b8>
 8000aac:	429e      	cmp	r6, r3
 8000aae:	d92d      	bls.n	8000b0c <__udivmoddi4+0x2b8>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1b9b      	subs	r3, r3, r6
 8000ab6:	b289      	uxth	r1, r1
 8000ab8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000abc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ac0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x28a>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ad4:	d216      	bcs.n	8000b04 <__udivmoddi4+0x2b0>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d914      	bls.n	8000b04 <__udivmoddi4+0x2b0>
 8000ada:	3e02      	subs	r6, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	1ac9      	subs	r1, r1, r3
 8000ae0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ae4:	e738      	b.n	8000958 <__udivmoddi4+0x104>
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e705      	b.n	80008f8 <__udivmoddi4+0xa4>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e3      	b.n	80008b8 <__udivmoddi4+0x64>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6f8      	b.n	80008e6 <__udivmoddi4+0x92>
 8000af4:	454b      	cmp	r3, r9
 8000af6:	d2a9      	bcs.n	8000a4c <__udivmoddi4+0x1f8>
 8000af8:	ebb9 0802 	subs.w	r8, r9, r2
 8000afc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7a3      	b.n	8000a4c <__udivmoddi4+0x1f8>
 8000b04:	4646      	mov	r6, r8
 8000b06:	e7ea      	b.n	8000ade <__udivmoddi4+0x28a>
 8000b08:	4620      	mov	r0, r4
 8000b0a:	e794      	b.n	8000a36 <__udivmoddi4+0x1e2>
 8000b0c:	4640      	mov	r0, r8
 8000b0e:	e7d1      	b.n	8000ab4 <__udivmoddi4+0x260>
 8000b10:	46d0      	mov	r8, sl
 8000b12:	e77b      	b.n	8000a0c <__udivmoddi4+0x1b8>
 8000b14:	3b02      	subs	r3, #2
 8000b16:	4461      	add	r1, ip
 8000b18:	e732      	b.n	8000980 <__udivmoddi4+0x12c>
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	e709      	b.n	8000932 <__udivmoddi4+0xde>
 8000b1e:	4464      	add	r4, ip
 8000b20:	3802      	subs	r0, #2
 8000b22:	e742      	b.n	80009aa <__udivmoddi4+0x156>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fbbd 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f8d5 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 f9e7 	bl	8000f08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b3a:	f000 f9bb 	bl	8000eb4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b3e:	f000 f93d 	bl	8000dbc <MX_ADC1_Init>
  MX_DAC_Init();
 8000b42:	f000 f98d 	bl	8000e60 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start( &hdac , DAC_CHANNEL_1 );
 8000b46:	2100      	movs	r1, #0
 8000b48:	485b      	ldr	r0, [pc, #364]	; (8000cb8 <main+0x190>)
 8000b4a:	f001 f8f8 	bl	8001d3e <HAL_DAC_Start>
  HAL_DAC_SetValue( &hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, counter ) ;
 8000b4e:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <main+0x194>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	4858      	ldr	r0, [pc, #352]	; (8000cb8 <main+0x190>)
 8000b58:	f001 f943 	bl	8001de2 <HAL_DAC_SetValue>

  HAL_ADC_Start( &hadc1 );
 8000b5c:	4858      	ldr	r0, [pc, #352]	; (8000cc0 <main+0x198>)
 8000b5e:	f000 fc5b 	bl	8001418 <HAL_ADC_Start>
  HAL_StatusTypeDef result_adc = HAL_ADC_PollForConversion( &hadc1 , 100 ) ;
 8000b62:	2164      	movs	r1, #100	; 0x64
 8000b64:	4856      	ldr	r0, [pc, #344]	; (8000cc0 <main+0x198>)
 8000b66:	f000 fd29 	bl	80015bc <HAL_ADC_PollForConversion>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	75fb      	strb	r3, [r7, #23]
  avg = (double)( hadc1.Instance->DR ) ;
 8000b6e:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <main+0x198>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fdb3 	bl	80006e0 <__aeabi_ui2d>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4951      	ldr	r1, [pc, #324]	; (8000cc4 <main+0x19c>)
 8000b80:	e9c1 2300 	strd	r2, r3, [r1]

  uint32_t time ;
  uint32_t last_time ;
  uint32_t prev_time ;
  int flag = 0 ;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t small_count = 0 ;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time = HAL_GetTick();
 8000b8c:	f000 fbf4 	bl	8001378 <HAL_GetTick>
 8000b90:	6138      	str	r0, [r7, #16]
	  if( small_count >= 999 ){
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d90a      	bls.n	8000bb2 <main+0x8a>
		  delta_time = time - prev_time ;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b48      	ldr	r3, [pc, #288]	; (8000cc8 <main+0x1a0>)
 8000ba6:	601a      	str	r2, [r3, #0]
		  prev_time = time ;
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	623b      	str	r3, [r7, #32]
		  small_count = 0 ;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	e002      	b.n	8000bb8 <main+0x90>
	  }
	  else{
		  small_count++;
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
	  }

	  HAL_ADC_Start( &hadc1 );
 8000bb8:	4841      	ldr	r0, [pc, #260]	; (8000cc0 <main+0x198>)
 8000bba:	f000 fc2d 	bl	8001418 <HAL_ADC_Start>
	  HAL_StatusTypeDef result_adc = HAL_ADC_PollForConversion( &hadc1 , 100 ) ;
 8000bbe:	2164      	movs	r1, #100	; 0x64
 8000bc0:	483f      	ldr	r0, [pc, #252]	; (8000cc0 <main+0x198>)
 8000bc2:	f000 fcfb 	bl	80015bc <HAL_ADC_PollForConversion>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73fb      	strb	r3, [r7, #15]

	  if(result_adc == HAL_OK ){
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d13c      	bne.n	8000c4a <main+0x122>
		  value = ( hadc1.Instance->DR ) ;
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <main+0x198>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <main+0x1a4>)
 8000bda:	601a      	str	r2, [r3, #0]
		  double alpha = 0.00033 ;
 8000bdc:	a334      	add	r3, pc, #208	; (adr r3, 8000cb0 <main+0x188>)
 8000bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be2:	e9c7 2300 	strd	r2, r3, [r7]
		  avg = (1 - alpha)*avg + alpha*(double)value ;
 8000be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4938      	ldr	r1, [pc, #224]	; (8000cd0 <main+0x1a8>)
 8000bf0:	f7ff fc38 	bl	8000464 <__aeabi_dsub>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <main+0x19c>)
 8000bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c02:	f7ff fb01 	bl	8000208 <__aeabi_dmul>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4614      	mov	r4, r2
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <main+0x1a4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd74 	bl	8000700 <__aeabi_i2d>
 8000c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c1c:	f7ff faf4 	bl	8000208 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4620      	mov	r0, r4
 8000c26:	4629      	mov	r1, r5
 8000c28:	f7ff fc1e 	bl	8000468 <__adddf3>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4924      	ldr	r1, [pc, #144]	; (8000cc4 <main+0x19c>)
 8000c32:	e9c1 2300 	strd	r2, r3, [r1]
		  avg_int = (int)avg ;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <main+0x19c>)
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f7ff fdc8 	bl	80007d4 <__aeabi_d2iz>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <main+0x1ac>)
 8000c48:	6013      	str	r3, [r2, #0]
	  }


	  if( time - last_time > 300 ){
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c54:	d902      	bls.n	8000c5c <main+0x134>
		  flag = 1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	e001      	b.n	8000c60 <main+0x138>
	  }
	  else{
		  flag = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
	  }

	  	if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) && flag == 1 ){
 8000c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c64:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <main+0x1b0>)
 8000c66:	f001 fac5 	bl	80021f4 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d117      	bne.n	8000ca0 <main+0x178>
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d114      	bne.n	8000ca0 <main+0x178>
	  		HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET ) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	2120      	movs	r1, #32
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <main+0x1b4>)
 8000c7c:	f001 fad2 	bl	8002224 <HAL_GPIO_WritePin>

	  		counter++;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <main+0x194>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <main+0x194>)
 8000c88:	6013      	str	r3, [r2, #0]
	  		HAL_DAC_SetValue( &hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, counter ) ;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <main+0x194>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <main+0x190>)
 8000c94:	f001 f8a5 	bl	8001de2 <HAL_DAC_SetValue>
	  		last_time = HAL_GetTick();
 8000c98:	f000 fb6e 	bl	8001378 <HAL_GetTick>
 8000c9c:	6278      	str	r0, [r7, #36]	; 0x24
 8000c9e:	e004      	b.n	8000caa <main+0x182>
		}
		else{
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET ) ;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <main+0x1b4>)
 8000ca6:	f001 fabd 	bl	8002224 <HAL_GPIO_WritePin>
  {
 8000caa:	e76f      	b.n	8000b8c <main+0x64>
 8000cac:	f3af 8000 	nop.w
 8000cb0:	352a8438 	.word	0x352a8438
 8000cb4:	3f35a07b 	.word	0x3f35a07b
 8000cb8:	20000074 	.word	0x20000074
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	2000002c 	.word	0x2000002c
 8000cc4:	200000d8 	.word	0x200000d8
 8000cc8:	200000d0 	.word	0x200000d0
 8000ccc:	200000cc 	.word	0x200000cc
 8000cd0:	3ff00000 	.word	0x3ff00000
 8000cd4:	200000e0 	.word	0x200000e0
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	2234      	movs	r2, #52	; 0x34
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fb80 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <SystemClock_Config+0xd4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <SystemClock_Config+0xd4>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <SystemClock_Config+0xd4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <SystemClock_Config+0xd8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <SystemClock_Config+0xd8>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <SystemClock_Config+0xd8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d54:	2310      	movs	r3, #16
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fdbc 	bl	80028ec <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d7a:	f000 f933 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2302      	movs	r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fa5c 	bl	8002258 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000da6:	f000 f91d 	bl	8000fe4 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	; 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e1e:	f000 fab7 	bl	8001390 <HAL_ADC_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e28:	f000 f8dc 	bl	8000fe4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e34:	2307      	movs	r3, #7
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_ADC1_Init+0x98>)
 8000e3e:	f000 fc49 	bl	80016d4 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 f8cc 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000002c 	.word	0x2000002c
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_DAC_Init+0x4c>)
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <MX_DAC_Init+0x50>)
 8000e72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_DAC_Init+0x4c>)
 8000e76:	f000 ff40 	bl	8001cfa <HAL_DAC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e80:	f000 f8b0 	bl	8000fe4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_DAC_Init+0x4c>)
 8000e94:	f000 ffca 	bl	8001e2c <HAL_DAC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e9e:	f000 f8a1 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000074 	.word	0x20000074
 8000eb0:	40007400 	.word	0x40007400

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f001 ff9c 	bl	8002e28 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f875 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000088 	.word	0x20000088
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0xd0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f94:	f001 f946 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_GPIO_Init+0xd8>)
 8000fb0:	f000 ff8c 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000fcc:	f000 ff7e 	bl	8001ecc <HAL_GPIO_Init>

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800102e:	2007      	movs	r0, #7
 8001030:	f000 fe30 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_ADC_MspInit+0x7c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d127      	bne.n	80010b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_ADC_MspInit+0x80>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0x80>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x80>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_ADC_MspInit+0x80>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_ADC_MspInit+0x80>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0x80>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_ADC_MspInit+0x84>)
 80010ae:	f000 ff0d 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012000 	.word	0x40012000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_DAC_MspInit+0x7c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d127      	bne.n	800113a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_DAC_MspInit+0x80>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <HAL_DAC_MspInit+0x80>)
 80010f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <HAL_DAC_MspInit+0x80>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_DAC_MspInit+0x80>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_DAC_MspInit+0x80>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_DAC_MspInit+0x80>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001122:	2310      	movs	r3, #16
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_DAC_MspInit+0x84>)
 8001136:	f000 fec9 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40007400 	.word	0x40007400
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0x88>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011aa:	230c      	movs	r3, #12
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ba:	2307      	movs	r3, #7
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x8c>)
 80011c6:	f000 fe81 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f890 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001274:	4c0b      	ldr	r4, [pc, #44]	; (80012a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001282:	f7ff ffd7 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f002 f891 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fc4d 	bl	8000b28 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800129c:	08003444 	.word	0x08003444
  ldr r2, =_sbss
 80012a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012a4:	200000e8 	.word	0x200000e8

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 fcdd 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fe86 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fce7 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132c:	f000 fcbd 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000000c 	.word	0x2000000c
 8001374:	200000e4 	.word	0x200000e4

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200000e4 	.word	0x200000e4

08001390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e033      	b.n	800140e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe46 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d6:	f023 0302 	bic.w	r3, r3, #2
 80013da:	f043 0202 	orr.w	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 faa8 	bl	8001938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f023 0303 	bic.w	r3, r3, #3
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
 80013fe:	e001      	b.n	8001404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Start+0x1a>
 800142e:	2302      	movs	r3, #2
 8001430:	e0b2      	b.n	8001598 <HAL_ADC_Start+0x180>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b01      	cmp	r3, #1
 8001446:	d018      	beq.n	800147a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001458:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <HAL_ADC_Start+0x18c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_ADC_Start+0x190>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9a      	lsrs	r2, r3, #18
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800146c:	e002      	b.n	8001474 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3b01      	subs	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d17a      	bne.n	800157e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c6:	d106      	bne.n	80014d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	f023 0206 	bic.w	r2, r3, #6
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	645a      	str	r2, [r3, #68]	; 0x44
 80014d4:	e002      	b.n	80014dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_ADC_Start+0x194>)
 80014e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d12a      	bne.n	8001554 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <HAL_ADC_Start+0x198>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d015      	beq.n	8001534 <HAL_ADC_Start+0x11c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <HAL_ADC_Start+0x19c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d105      	bne.n	800151e <HAL_ADC_Start+0x106>
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_ADC_Start+0x194>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00a      	beq.n	8001534 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_ADC_Start+0x1a0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d136      	bne.n	8001596 <HAL_ADC_Start+0x17e>
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_ADC_Start+0x194>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d130      	bne.n	8001596 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d129      	bne.n	8001596 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	e020      	b.n	8001596 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_ADC_Start+0x198>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d11b      	bne.n	8001596 <HAL_ADC_Start+0x17e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d114      	bne.n	8001596 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	e00b      	b.n	8001596 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000004 	.word	0x20000004
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	40012300 	.word	0x40012300
 80015b0:	40012000 	.word	0x40012000
 80015b4:	40012100 	.word	0x40012100
 80015b8:	40012200 	.word	0x40012200

080015bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d8:	d113      	bne.n	8001602 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e8:	d10b      	bne.n	8001602 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e063      	b.n	80016ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001602:	f7ff feb9 	bl	8001378 <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001608:	e021      	b.n	800164e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001610:	d01d      	beq.n	800164e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <HAL_ADC_PollForConversion+0x6c>
 8001618:	f7ff feae 	bl	8001378 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d212      	bcs.n	800164e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b02      	cmp	r3, #2
 8001634:	d00b      	beq.n	800164e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f043 0204 	orr.w	r2, r3, #4
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e03d      	b.n	80016ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b02      	cmp	r3, #2
 800165a:	d1d6      	bne.n	800160a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0212 	mvn.w	r2, #18
 8001664:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d123      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001684:	2b00      	cmp	r3, #0
 8001686:	d11f      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1c>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e113      	b.n	8001918 <HAL_ADC_ConfigChannel+0x244>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d925      	bls.n	800174c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3b1e      	subs	r3, #30
 8001716:	2207      	movs	r2, #7
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68d9      	ldr	r1, [r3, #12]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	4603      	mov	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4403      	add	r3, r0
 800173e:	3b1e      	subs	r3, #30
 8001740:	409a      	lsls	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	e022      	b.n	8001792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	2207      	movs	r2, #7
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6919      	ldr	r1, [r3, #16]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	4603      	mov	r3, r0
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4403      	add	r3, r0
 8001788:	409a      	lsls	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b06      	cmp	r3, #6
 8001798:	d824      	bhi.n	80017e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b05      	subs	r3, #5
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	400a      	ands	r2, r1
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b05      	subs	r3, #5
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	635a      	str	r2, [r3, #52]	; 0x34
 80017e2:	e04c      	b.n	800187e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d824      	bhi.n	8001836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b23      	subs	r3, #35	; 0x23
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b23      	subs	r3, #35	; 0x23
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	e023      	b.n	800187e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b41      	subs	r3, #65	; 0x41
 8001848:	221f      	movs	r2, #31
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	400a      	ands	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b41      	subs	r3, #65	; 0x41
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_ADC_ConfigChannel+0x250>)
 8001880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_ADC_ConfigChannel+0x254>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d10f      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1d8>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b12      	cmp	r3, #18
 8001892:	d10b      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_ADC_ConfigChannel+0x254>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12b      	bne.n	800190e <HAL_ADC_ConfigChannel+0x23a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <HAL_ADC_ConfigChannel+0x258>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d003      	beq.n	80018c8 <HAL_ADC_ConfigChannel+0x1f4>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d122      	bne.n	800190e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_ADC_ConfigChannel+0x258>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d111      	bne.n	800190e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_ADC_ConfigChannel+0x25c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_ADC_ConfigChannel+0x260>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	40012000 	.word	0x40012000
 800192c:	10000012 	.word	0x10000012
 8001930:	20000004 	.word	0x20000004
 8001934:	431bde83 	.word	0x431bde83

08001938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001940:	4b79      	ldr	r3, [pc, #484]	; (8001b28 <ADC_Init+0x1f0>)
 8001942:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	431a      	orrs	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800196c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	021a      	lsls	r2, r3, #8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <ADC_Init+0x1f4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6899      	ldr	r1, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	e00f      	b.n	8001a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0202 	bic.w	r2, r2, #2
 8001a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
 8001a50:	005a      	lsls	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01b      	beq.n	8001a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	035a      	lsls	r2, r3, #13
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e007      	b.n	8001aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	051a      	lsls	r2, r3, #20
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aee:	025a      	lsls	r2, r3, #9
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	029a      	lsls	r2, r3, #10
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	609a      	str	r2, [r3, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40012300 	.word	0x40012300
 8001b2c:	0f000001 	.word	0x0f000001

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff47 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff5c 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffb0 	bl	8001c50 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e014      	b.n	8001d36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff f9d3 	bl	80010c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	795b      	ldrb	r3, [r3, #5]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_DAC_Start+0x16>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e040      	b.n	8001dd6 <HAL_DAC_Start+0x98>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10f      	bne.n	8001d9e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d88:	2b3c      	cmp	r3, #60	; 0x3c
 8001d8a:	d11d      	bne.n	8001dc8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	e014      	b.n	8001dc8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	213c      	movs	r1, #60	; 0x3c
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d107      	bne.n	8001dc8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0202 	orr.w	r2, r2, #2
 8001dc6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b087      	sub	sp, #28
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	3308      	adds	r3, #8
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e004      	b.n	8001e16 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	3314      	adds	r3, #20
 8001e14:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	795b      	ldrb	r3, [r3, #5]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_DAC_ConfigChannel+0x18>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e03c      	b.n	8001ebe <HAL_DAC_ConfigChannel+0x92>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	22c0      	movs	r2, #192	; 0xc0
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e165      	b.n	80021b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8154 	bne.w	80021ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80ae 	beq.w	80021ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <HAL_GPIO_Init+0x300>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_GPIO_Init+0x300>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <HAL_GPIO_Init+0x300>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x304>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4e      	ldr	r2, [pc, #312]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_GPIO_Init+0x310>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_GPIO_Init+0x314>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4b      	ldr	r2, [pc, #300]	; (80021e4 <HAL_GPIO_Init+0x318>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x206>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a49      	ldr	r2, [pc, #292]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x202>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00c      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00a      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020d2:	2305      	movs	r3, #5
 80020d4:	e008      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020d6:	2304      	movs	r3, #4
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020da:	2303      	movs	r3, #3
 80020dc:	e004      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x21c>
 80020e6:	2300      	movs	r3, #0
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f002 0203 	and.w	r2, r2, #3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4093      	lsls	r3, r2
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f8:	4935      	ldr	r1, [pc, #212]	; (80021d0 <HAL_GPIO_Init+0x304>)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a31      	ldr	r2, [pc, #196]	; (80021f0 <HAL_GPIO_Init+0x324>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215a:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_GPIO_Init+0x324>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_GPIO_Init+0x324>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3301      	adds	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	f67f ae96 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40013800 	.word	0x40013800
 80021d4:	40020000 	.word	0x40020000
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020c00 	.word	0x40020c00
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40021400 	.word	0x40021400
 80021ec:	40021800 	.word	0x40021800
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0cc      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b68      	ldr	r3, [pc, #416]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d90c      	bls.n	8002294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d044      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d119      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002312:	2b03      	cmp	r3, #3
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e067      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4934      	ldr	r1, [pc, #208]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7ff f816 	bl	8001378 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff f812 	bl	8001378 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e04f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d20c      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f855 	bl	800248c <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490a      	ldr	r1, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ff76 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00
 8002414:	40023800 	.word	0x40023800
 8002418:	0800341c 	.word	0x0800341c
 800241c:	20000004 	.word	0x20000004
 8002420:	20000008 	.word	0x20000008

08002424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	0800342c 	.word	0x0800342c

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffdc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0b5b      	lsrs	r3, r3, #13
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	0800342c 	.word	0x0800342c

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b0ae      	sub	sp, #184	; 0xb8
 8002492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b2:	4bcb      	ldr	r3, [pc, #812]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	f200 8206 	bhi.w	80028cc <HAL_RCC_GetSysClockFreq+0x440>
 80024c0:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	080024fd 	.word	0x080024fd
 80024cc:	080028cd 	.word	0x080028cd
 80024d0:	080028cd 	.word	0x080028cd
 80024d4:	080028cd 	.word	0x080028cd
 80024d8:	08002505 	.word	0x08002505
 80024dc:	080028cd 	.word	0x080028cd
 80024e0:	080028cd 	.word	0x080028cd
 80024e4:	080028cd 	.word	0x080028cd
 80024e8:	0800250d 	.word	0x0800250d
 80024ec:	080028cd 	.word	0x080028cd
 80024f0:	080028cd 	.word	0x080028cd
 80024f4:	080028cd 	.word	0x080028cd
 80024f8:	080026fd 	.word	0x080026fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4bb9      	ldr	r3, [pc, #740]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80024fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002502:	e1e7      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4bb8      	ldr	r3, [pc, #736]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800250a:	e1e3      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4bb4      	ldr	r3, [pc, #720]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002518:	4bb1      	ldr	r3, [pc, #708]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d071      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	4bae      	ldr	r3, [pc, #696]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	2200      	movs	r2, #0
 800252c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002530:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6439      	str	r1, [r7, #64]	; 0x40
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800257c:	4649      	mov	r1, r9
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4641      	mov	r1, r8
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4641      	mov	r1, r8
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002590:	4649      	mov	r1, r9
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025a4:	4649      	mov	r1, r9
 80025a6:	00cb      	lsls	r3, r1, #3
 80025a8:	4641      	mov	r1, r8
 80025aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ae:	4641      	mov	r1, r8
 80025b0:	00ca      	lsls	r2, r1, #3
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	4622      	mov	r2, r4
 80025ba:	189b      	adds	r3, r3, r2
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	462b      	mov	r3, r5
 80025c0:	460a      	mov	r2, r1
 80025c2:	eb42 0303 	adc.w	r3, r2, r3
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025d4:	4629      	mov	r1, r5
 80025d6:	024b      	lsls	r3, r1, #9
 80025d8:	4621      	mov	r1, r4
 80025da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025de:	4621      	mov	r1, r4
 80025e0:	024a      	lsls	r2, r1, #9
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025f8:	f7fe f914 	bl	8000824 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4613      	mov	r3, r2
 8002602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002606:	e067      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002608:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	2200      	movs	r2, #0
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002614:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002620:	67bb      	str	r3, [r7, #120]	; 0x78
 8002622:	2300      	movs	r3, #0
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002626:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800262a:	4622      	mov	r2, r4
 800262c:	462b      	mov	r3, r5
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4621      	mov	r1, r4
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	62b9      	str	r1, [r7, #40]	; 0x28
 8002648:	4629      	mov	r1, r5
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800265c:	4649      	mov	r1, r9
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4641      	mov	r1, r8
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4641      	mov	r1, r8
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4641      	mov	r1, r8
 800266c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002670:	4649      	mov	r1, r9
 8002672:	eb63 0b01 	sbc.w	fp, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002682:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800268a:	4692      	mov	sl, r2
 800268c:	469b      	mov	fp, r3
 800268e:	4623      	mov	r3, r4
 8002690:	eb1a 0303 	adds.w	r3, sl, r3
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	462b      	mov	r3, r5
 8002698:	eb4b 0303 	adc.w	r3, fp, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026aa:	4629      	mov	r1, r5
 80026ac:	028b      	lsls	r3, r1, #10
 80026ae:	4621      	mov	r1, r4
 80026b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b4:	4621      	mov	r1, r4
 80026b6:	028a      	lsls	r2, r1, #10
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026c0:	2200      	movs	r2, #0
 80026c2:	673b      	str	r3, [r7, #112]	; 0x70
 80026c4:	677a      	str	r2, [r7, #116]	; 0x74
 80026c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026ca:	f7fe f8ab 	bl	8000824 <__aeabi_uldivmod>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4613      	mov	r3, r2
 80026d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026fa:	e0eb      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d06b      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	2200      	movs	r2, #0
 800271c:	66bb      	str	r3, [r7, #104]	; 0x68
 800271e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002726:	663b      	str	r3, [r7, #96]	; 0x60
 8002728:	2300      	movs	r3, #0
 800272a:	667b      	str	r3, [r7, #100]	; 0x64
 800272c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002730:	4622      	mov	r2, r4
 8002732:	462b      	mov	r3, r5
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4621      	mov	r1, r4
 800274a:	1a51      	subs	r1, r2, r1
 800274c:	61b9      	str	r1, [r7, #24]
 800274e:	4629      	mov	r1, r5
 8002750:	eb63 0301 	sbc.w	r3, r3, r1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002762:	4659      	mov	r1, fp
 8002764:	018b      	lsls	r3, r1, #6
 8002766:	4651      	mov	r1, sl
 8002768:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276c:	4651      	mov	r1, sl
 800276e:	018a      	lsls	r2, r1, #6
 8002770:	4651      	mov	r1, sl
 8002772:	ebb2 0801 	subs.w	r8, r2, r1
 8002776:	4659      	mov	r1, fp
 8002778:	eb63 0901 	sbc.w	r9, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002788:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002790:	4690      	mov	r8, r2
 8002792:	4699      	mov	r9, r3
 8002794:	4623      	mov	r3, r4
 8002796:	eb18 0303 	adds.w	r3, r8, r3
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	462b      	mov	r3, r5
 800279e:	eb49 0303 	adc.w	r3, r9, r3
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027b0:	4629      	mov	r1, r5
 80027b2:	024b      	lsls	r3, r1, #9
 80027b4:	4621      	mov	r1, r4
 80027b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ba:	4621      	mov	r1, r4
 80027bc:	024a      	lsls	r2, r1, #9
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027c6:	2200      	movs	r2, #0
 80027c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027d0:	f7fe f828 	bl	8000824 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4613      	mov	r3, r2
 80027da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027de:	e065      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x420>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	00f42400 	.word	0x00f42400
 80027e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	4611      	mov	r1, r2
 80027f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027fc:	653b      	str	r3, [r7, #80]	; 0x50
 80027fe:	2300      	movs	r3, #0
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
 8002802:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002806:	4642      	mov	r2, r8
 8002808:	464b      	mov	r3, r9
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	0159      	lsls	r1, r3, #5
 8002814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002818:	0150      	lsls	r0, r2, #5
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4641      	mov	r1, r8
 8002820:	1a51      	subs	r1, r2, r1
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	4649      	mov	r1, r9
 8002826:	eb63 0301 	sbc.w	r3, r3, r1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002838:	4659      	mov	r1, fp
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	4651      	mov	r1, sl
 800283e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002842:	4651      	mov	r1, sl
 8002844:	018a      	lsls	r2, r1, #6
 8002846:	4651      	mov	r1, sl
 8002848:	1a54      	subs	r4, r2, r1
 800284a:	4659      	mov	r1, fp
 800284c:	eb63 0501 	sbc.w	r5, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	464b      	mov	r3, r9
 800286c:	eb45 0303 	adc.w	r3, r5, r3
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287e:	4629      	mov	r1, r5
 8002880:	028b      	lsls	r3, r1, #10
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002888:	4621      	mov	r1, r4
 800288a:	028a      	lsls	r2, r1, #10
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002894:	2200      	movs	r2, #0
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
 8002898:	64fa      	str	r2, [r7, #76]	; 0x4c
 800289a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800289e:	f7fd ffc1 	bl	8000824 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4613      	mov	r3, r2
 80028a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0f1b      	lsrs	r3, r3, #28
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028ca:	e003      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	37b8      	adds	r7, #184	; 0xb8
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400

080028ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e28d      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8083 	beq.w	8002a12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800290c:	4b94      	ldr	r3, [pc, #592]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	d019      	beq.n	800294c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002918:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002920:	2b08      	cmp	r3, #8
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b88      	ldr	r3, [pc, #544]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b84      	ldr	r3, [pc, #528]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x124>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e25a      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x90>
 800296e:	4b7c      	ldr	r3, [pc, #496]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7b      	ldr	r2, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xcc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0xb4>
 8002986:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xcc>
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6b      	ldr	r2, [pc, #428]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fcda 	bl	8001378 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fcd6 	bl	8001378 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e21f      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xdc>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fcc6 	bl	8001378 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fcc2 	bl	8001378 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e20b      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x104>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06f      	beq.n	8002afe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a1e:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d017      	beq.n	8002a5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a2a:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a36:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d11c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x186>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1d3      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4937      	ldr	r1, [pc, #220]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	e03a      	b.n	8002afe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x278>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fc6f 	bl	8001378 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fc6b 	bl	8001378 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1b4      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4925      	ldr	r1, [pc, #148]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
 8002ad0:	e015      	b.n	8002afe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCC_OscConfig+0x278>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fc4e 	bl	8001378 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fc4a 	bl	8001378 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e193      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d036      	beq.n	8002b78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe fc2e 	bl	8001378 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe fc2a 	bl	8001378 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e173      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x234>
 8002b3e:	e01b      	b.n	8002b78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fc17 	bl	8001378 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	e00e      	b.n	8002b6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fc13 	bl	8001378 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d907      	bls.n	8002b6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e15c      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	42470000 	.word	0x42470000
 8002b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	4b8a      	ldr	r3, [pc, #552]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ea      	bne.n	8002b4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8097 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8a:	4b83      	ldr	r3, [pc, #524]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b7f      	ldr	r3, [pc, #508]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a7e      	ldr	r2, [pc, #504]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b7c      	ldr	r3, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fbd3 	bl	8001378 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7fe fbcf 	bl	8001378 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e118      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x31e>
 8002bfc:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x358>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x340>
 8002c12:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a60      	ldr	r2, [pc, #384]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0x358>
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a56      	ldr	r2, [pc, #344]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d015      	beq.n	8002c78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fb94 	bl	8001378 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe fb90 	bl	8001378 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0d7      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCC_OscConfig+0x368>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fb7e 	bl	8001378 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe fb7a 	bl	8001378 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0c1      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80ad 	beq.w	8002e18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d145      	bne.n	8002d5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x4b4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fb4e 	bl	8001378 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fb4a 	bl	8001378 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e093      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	491b      	ldr	r1, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4b4>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fb1f 	bl	8001378 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fb1b 	bl	8001378 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e064      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x452>
 8002d5c:	e05c      	b.n	8002e18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x4b4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fb08 	bl	8001378 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fb04 	bl	8001378 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04d      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x480>
 8002d8a:	e045      	b.n	8002e18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e040      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCC_OscConfig+0x538>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d030      	beq.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d129      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d122      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d119      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10f      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e03f      	b.n	8002eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe f97e 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f829 	bl	8002ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b0c0      	sub	sp, #256	; 0x100
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	68d9      	ldr	r1, [r3, #12]
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	ea40 0301 	orr.w	r3, r0, r1
 8002eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f1c:	f021 010c 	bic.w	r1, r1, #12
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	6999      	ldr	r1, [r3, #24]
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	ea40 0301 	orr.w	r3, r0, r1
 8002f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b8f      	ldr	r3, [pc, #572]	; (8003190 <UART_SetConfig+0x2cc>)
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d005      	beq.n	8002f64 <UART_SetConfig+0xa0>
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b8d      	ldr	r3, [pc, #564]	; (8003194 <UART_SetConfig+0x2d0>)
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d104      	bne.n	8002f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7ff fa7e 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 8002f68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f6c:	e003      	b.n	8002f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f6e:	f7ff fa65 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8002f72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f80:	f040 810c 	bne.w	800319c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	1891      	adds	r1, r2, r2
 8002f9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f9e:	415b      	adcs	r3, r3
 8002fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	eb12 0801 	adds.w	r8, r2, r1
 8002fac:	4629      	mov	r1, r5
 8002fae:	eb43 0901 	adc.w	r9, r3, r1
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fc6:	4690      	mov	r8, r2
 8002fc8:	4699      	mov	r9, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	eb18 0303 	adds.w	r3, r8, r3
 8002fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fd4:	462b      	mov	r3, r5
 8002fd6:	eb49 0303 	adc.w	r3, r9, r3
 8002fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	18db      	adds	r3, r3, r3
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	eb42 0303 	adc.w	r3, r2, r3
 8002ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8003000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003008:	f7fd fc0c 	bl	8000824 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <UART_SetConfig+0x2d4>)
 8003012:	fba3 2302 	umull	r2, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	011c      	lsls	r4, r3, #4
 800301a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003024:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	1891      	adds	r1, r2, r2
 8003032:	64b9      	str	r1, [r7, #72]	; 0x48
 8003034:	415b      	adcs	r3, r3
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800303c:	4641      	mov	r1, r8
 800303e:	eb12 0a01 	adds.w	sl, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb43 0b01 	adc.w	fp, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800305c:	4692      	mov	sl, r2
 800305e:	469b      	mov	fp, r3
 8003060:	4643      	mov	r3, r8
 8003062:	eb1a 0303 	adds.w	r3, sl, r3
 8003066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800306a:	464b      	mov	r3, r9
 800306c:	eb4b 0303 	adc.w	r3, fp, r3
 8003070:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003080:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003088:	460b      	mov	r3, r1
 800308a:	18db      	adds	r3, r3, r3
 800308c:	643b      	str	r3, [r7, #64]	; 0x40
 800308e:	4613      	mov	r3, r2
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
 8003096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800309a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800309e:	f7fd fbc1 	bl	8000824 <__aeabi_uldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <UART_SetConfig+0x2d4>)
 80030aa:	fba3 2301 	umull	r2, r3, r3, r1
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2264      	movs	r2, #100	; 0x64
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	1acb      	subs	r3, r1, r3
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <UART_SetConfig+0x2d4>)
 80030c0:	fba3 2302 	umull	r2, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030cc:	441c      	add	r4, r3
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80030e8:	415b      	adcs	r3, r3
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030f0:	4641      	mov	r1, r8
 80030f2:	1851      	adds	r1, r2, r1
 80030f4:	6339      	str	r1, [r7, #48]	; 0x30
 80030f6:	4649      	mov	r1, r9
 80030f8:	414b      	adcs	r3, r1
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003108:	4659      	mov	r1, fp
 800310a:	00cb      	lsls	r3, r1, #3
 800310c:	4651      	mov	r1, sl
 800310e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003112:	4651      	mov	r1, sl
 8003114:	00ca      	lsls	r2, r1, #3
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	4603      	mov	r3, r0
 800311c:	4642      	mov	r2, r8
 800311e:	189b      	adds	r3, r3, r2
 8003120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003124:	464b      	mov	r3, r9
 8003126:	460a      	mov	r2, r1
 8003128:	eb42 0303 	adc.w	r3, r2, r3
 800312c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800313c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003144:	460b      	mov	r3, r1
 8003146:	18db      	adds	r3, r3, r3
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
 800314a:	4613      	mov	r3, r2
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800315a:	f7fd fb63 	bl	8000824 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <UART_SetConfig+0x2d4>)
 8003164:	fba3 1302 	umull	r1, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	2164      	movs	r1, #100	; 0x64
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	3332      	adds	r3, #50	; 0x32
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <UART_SetConfig+0x2d4>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4422      	add	r2, r4
 800318a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800318c:	e105      	b.n	800339a <UART_SetConfig+0x4d6>
 800318e:	bf00      	nop
 8003190:	40011000 	.word	0x40011000
 8003194:	40011400 	.word	0x40011400
 8003198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ae:	4642      	mov	r2, r8
 80031b0:	464b      	mov	r3, r9
 80031b2:	1891      	adds	r1, r2, r2
 80031b4:	6239      	str	r1, [r7, #32]
 80031b6:	415b      	adcs	r3, r3
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031be:	4641      	mov	r1, r8
 80031c0:	1854      	adds	r4, r2, r1
 80031c2:	4649      	mov	r1, r9
 80031c4:	eb43 0501 	adc.w	r5, r3, r1
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	00eb      	lsls	r3, r5, #3
 80031d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d6:	00e2      	lsls	r2, r4, #3
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	18e3      	adds	r3, r4, r3
 80031e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031e4:	464b      	mov	r3, r9
 80031e6:	eb45 0303 	adc.w	r3, r5, r3
 80031ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800320a:	4629      	mov	r1, r5
 800320c:	008b      	lsls	r3, r1, #2
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003214:	4621      	mov	r1, r4
 8003216:	008a      	lsls	r2, r1, #2
 8003218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800321c:	f7fd fb02 	bl	8000824 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4b60      	ldr	r3, [pc, #384]	; (80033a8 <UART_SetConfig+0x4e4>)
 8003226:	fba3 2302 	umull	r2, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	011c      	lsls	r4, r3, #4
 800322e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003232:	2200      	movs	r2, #0
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003238:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800323c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003240:	4642      	mov	r2, r8
 8003242:	464b      	mov	r3, r9
 8003244:	1891      	adds	r1, r2, r2
 8003246:	61b9      	str	r1, [r7, #24]
 8003248:	415b      	adcs	r3, r3
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	4641      	mov	r1, r8
 8003252:	1851      	adds	r1, r2, r1
 8003254:	6139      	str	r1, [r7, #16]
 8003256:	4649      	mov	r1, r9
 8003258:	414b      	adcs	r3, r1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003268:	4659      	mov	r1, fp
 800326a:	00cb      	lsls	r3, r1, #3
 800326c:	4651      	mov	r1, sl
 800326e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003272:	4651      	mov	r1, sl
 8003274:	00ca      	lsls	r2, r1, #3
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	4603      	mov	r3, r0
 800327c:	4642      	mov	r2, r8
 800327e:	189b      	adds	r3, r3, r2
 8003280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003284:	464b      	mov	r3, r9
 8003286:	460a      	mov	r2, r1
 8003288:	eb42 0303 	adc.w	r3, r2, r3
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	67bb      	str	r3, [r7, #120]	; 0x78
 800329a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032a8:	4649      	mov	r1, r9
 80032aa:	008b      	lsls	r3, r1, #2
 80032ac:	4641      	mov	r1, r8
 80032ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b2:	4641      	mov	r1, r8
 80032b4:	008a      	lsls	r2, r1, #2
 80032b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032ba:	f7fd fab3 	bl	8000824 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <UART_SetConfig+0x4e4>)
 80032c4:	fba3 1302 	umull	r1, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	2164      	movs	r1, #100	; 0x64
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	3332      	adds	r3, #50	; 0x32
 80032d6:	4a34      	ldr	r2, [pc, #208]	; (80033a8 <UART_SetConfig+0x4e4>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e2:	441c      	add	r4, r3
 80032e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e8:	2200      	movs	r2, #0
 80032ea:	673b      	str	r3, [r7, #112]	; 0x70
 80032ec:	677a      	str	r2, [r7, #116]	; 0x74
 80032ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032f2:	4642      	mov	r2, r8
 80032f4:	464b      	mov	r3, r9
 80032f6:	1891      	adds	r1, r2, r2
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	415b      	adcs	r3, r3
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003302:	4641      	mov	r1, r8
 8003304:	1851      	adds	r1, r2, r1
 8003306:	6039      	str	r1, [r7, #0]
 8003308:	4649      	mov	r1, r9
 800330a:	414b      	adcs	r3, r1
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800331a:	4659      	mov	r1, fp
 800331c:	00cb      	lsls	r3, r1, #3
 800331e:	4651      	mov	r1, sl
 8003320:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003324:	4651      	mov	r1, sl
 8003326:	00ca      	lsls	r2, r1, #3
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	4603      	mov	r3, r0
 800332e:	4642      	mov	r2, r8
 8003330:	189b      	adds	r3, r3, r2
 8003332:	66bb      	str	r3, [r7, #104]	; 0x68
 8003334:	464b      	mov	r3, r9
 8003336:	460a      	mov	r2, r1
 8003338:	eb42 0303 	adc.w	r3, r2, r3
 800333c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	663b      	str	r3, [r7, #96]	; 0x60
 8003348:	667a      	str	r2, [r7, #100]	; 0x64
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003356:	4649      	mov	r1, r9
 8003358:	008b      	lsls	r3, r1, #2
 800335a:	4641      	mov	r1, r8
 800335c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003360:	4641      	mov	r1, r8
 8003362:	008a      	lsls	r2, r1, #2
 8003364:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003368:	f7fd fa5c 	bl	8000824 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <UART_SetConfig+0x4e4>)
 8003372:	fba3 1302 	umull	r1, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2164      	movs	r1, #100	; 0x64
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <UART_SetConfig+0x4e4>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4422      	add	r2, r4
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	bf00      	nop
 800339c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a6:	bf00      	nop
 80033a8:	51eb851f 	.word	0x51eb851f

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 f820 	bl	8003404 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	0800343c 	.word	0x0800343c
 80033e8:	0800343c 	.word	0x0800343c
 80033ec:	0800343c 	.word	0x0800343c
 80033f0:	08003440 	.word	0x08003440

080033f4 <memset>:
 80033f4:	4402      	add	r2, r0
 80033f6:	4603      	mov	r3, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <_init>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	bf00      	nop
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr

08003410 <_fini>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	bf00      	nop
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr
